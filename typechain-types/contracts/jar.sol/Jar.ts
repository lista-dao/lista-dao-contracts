/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface JarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "HAY"
      | "addOperator"
      | "balanceOf"
      | "cage"
      | "decimals"
      | "deny"
      | "earned"
      | "endTime"
      | "exit"
      | "exitDelay"
      | "extractDust"
      | "flashLoanDelay"
      | "initialize"
      | "join"
      | "lastTimeRewardApplicable"
      | "lastUpdate"
      | "live"
      | "name"
      | "operators"
      | "rate"
      | "redeemBatch"
      | "rely"
      | "removeOperator"
      | "replenish"
      | "rewards"
      | "setExitDelay"
      | "setSpread"
      | "spread"
      | "stakeTime"
      | "symbol"
      | "tokensPerShare"
      | "totalSupply"
      | "tps"
      | "tpsPaid"
      | "uncage"
      | "unstakeTime"
      | "wards"
      | "withdrawn"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Cage"
      | "Exit"
      | "ExitDelayUpdated"
      | "Initialized"
      | "Join"
      | "OperatorSet"
      | "OperatorUnset"
      | "Redeem"
      | "Replenished"
      | "SpreadUpdated"
      | "Uncage"
  ): EventFragment;

  encodeFunctionData(functionFragment: "HAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "earned", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "exitDelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extractDust",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoanDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "join", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemBatch",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replenish",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpread",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "spread", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tpsPaid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uncage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "wards", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "withdrawn",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "HAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extractDust",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashLoanDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "replenish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSpread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tpsPaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uncage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawn", data: BytesLike): Result;
}

export namespace CageEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitDelayUpdatedEvent {
  export type InputTuple = [exitDelay: BigNumberish];
  export type OutputTuple = [exitDelay: bigint];
  export interface OutputObject {
    exitDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JoinEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorSetEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorUnsetEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [user: AddressLike[]];
  export type OutputTuple = [user: string[]];
  export interface OutputObject {
    user: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReplenishedEvent {
  export type InputTuple = [reward: BigNumberish];
  export type OutputTuple = [reward: bigint];
  export interface OutputObject {
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpreadUpdatedEvent {
  export type InputTuple = [newDuration: BigNumberish];
  export type OutputTuple = [newDuration: bigint];
  export interface OutputObject {
    newDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UncageEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Jar extends BaseContract {
  connect(runner?: ContractRunner | null): Jar;
  waitForDeployment(): Promise<this>;

  interface: JarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  HAY: TypedContractMethod<[], [string], "view">;

  addOperator: TypedContractMethod<
    [_operator: AddressLike],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  cage: TypedContractMethod<[], [void], "nonpayable">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deny: TypedContractMethod<[guy: AddressLike], [void], "nonpayable">;

  earned: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  endTime: TypedContractMethod<[], [bigint], "view">;

  exit: TypedContractMethod<[wad: BigNumberish], [void], "nonpayable">;

  exitDelay: TypedContractMethod<[], [bigint], "view">;

  extractDust: TypedContractMethod<[], [void], "nonpayable">;

  flashLoanDelay: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _hayToken: AddressLike,
      _spread: BigNumberish,
      _exitDelay: BigNumberish,
      _flashLoanDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  join: TypedContractMethod<[wad: BigNumberish], [void], "nonpayable">;

  lastTimeRewardApplicable: TypedContractMethod<[], [bigint], "view">;

  lastUpdate: TypedContractMethod<[], [bigint], "view">;

  live: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  operators: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rate: TypedContractMethod<[], [bigint], "view">;

  redeemBatch: TypedContractMethod<
    [accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  rely: TypedContractMethod<[guy: AddressLike], [void], "nonpayable">;

  removeOperator: TypedContractMethod<
    [_operator: AddressLike],
    [void],
    "nonpayable"
  >;

  replenish: TypedContractMethod<
    [wad: BigNumberish, newSpread: boolean],
    [void],
    "nonpayable"
  >;

  rewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setExitDelay: TypedContractMethod<
    [_exitDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSpread: TypedContractMethod<[_spread: BigNumberish], [void], "nonpayable">;

  spread: TypedContractMethod<[], [bigint], "view">;

  stakeTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokensPerShare: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tps: TypedContractMethod<[], [bigint], "view">;

  tpsPaid: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  uncage: TypedContractMethod<[], [void], "nonpayable">;

  unstakeTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  wards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawn: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "HAY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addOperator"
  ): TypedContractMethod<[_operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "cage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deny"
  ): TypedContractMethod<[guy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "earned"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exit"
  ): TypedContractMethod<[wad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exitDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extractDust"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "flashLoanDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _hayToken: AddressLike,
      _spread: BigNumberish,
      _exitDelay: BigNumberish,
      _flashLoanDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[wad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastTimeRewardApplicable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "live"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "operators"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeemBatch"
  ): TypedContractMethod<[accounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rely"
  ): TypedContractMethod<[guy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOperator"
  ): TypedContractMethod<[_operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replenish"
  ): TypedContractMethod<
    [wad: BigNumberish, newSpread: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setExitDelay"
  ): TypedContractMethod<[_exitDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSpread"
  ): TypedContractMethod<[_spread: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "spread"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokensPerShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tpsPaid"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "uncage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstakeTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "wards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawn"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Cage"
  ): TypedContractEvent<
    CageEvent.InputTuple,
    CageEvent.OutputTuple,
    CageEvent.OutputObject
  >;
  getEvent(
    key: "Exit"
  ): TypedContractEvent<
    ExitEvent.InputTuple,
    ExitEvent.OutputTuple,
    ExitEvent.OutputObject
  >;
  getEvent(
    key: "ExitDelayUpdated"
  ): TypedContractEvent<
    ExitDelayUpdatedEvent.InputTuple,
    ExitDelayUpdatedEvent.OutputTuple,
    ExitDelayUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Join"
  ): TypedContractEvent<
    JoinEvent.InputTuple,
    JoinEvent.OutputTuple,
    JoinEvent.OutputObject
  >;
  getEvent(
    key: "OperatorSet"
  ): TypedContractEvent<
    OperatorSetEvent.InputTuple,
    OperatorSetEvent.OutputTuple,
    OperatorSetEvent.OutputObject
  >;
  getEvent(
    key: "OperatorUnset"
  ): TypedContractEvent<
    OperatorUnsetEvent.InputTuple,
    OperatorUnsetEvent.OutputTuple,
    OperatorUnsetEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "Replenished"
  ): TypedContractEvent<
    ReplenishedEvent.InputTuple,
    ReplenishedEvent.OutputTuple,
    ReplenishedEvent.OutputObject
  >;
  getEvent(
    key: "SpreadUpdated"
  ): TypedContractEvent<
    SpreadUpdatedEvent.InputTuple,
    SpreadUpdatedEvent.OutputTuple,
    SpreadUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Uncage"
  ): TypedContractEvent<
    UncageEvent.InputTuple,
    UncageEvent.OutputTuple,
    UncageEvent.OutputObject
  >;

  filters: {
    "Cage()": TypedContractEvent<
      CageEvent.InputTuple,
      CageEvent.OutputTuple,
      CageEvent.OutputObject
    >;
    Cage: TypedContractEvent<
      CageEvent.InputTuple,
      CageEvent.OutputTuple,
      CageEvent.OutputObject
    >;

    "Exit(address,uint256)": TypedContractEvent<
      ExitEvent.InputTuple,
      ExitEvent.OutputTuple,
      ExitEvent.OutputObject
    >;
    Exit: TypedContractEvent<
      ExitEvent.InputTuple,
      ExitEvent.OutputTuple,
      ExitEvent.OutputObject
    >;

    "ExitDelayUpdated(uint256)": TypedContractEvent<
      ExitDelayUpdatedEvent.InputTuple,
      ExitDelayUpdatedEvent.OutputTuple,
      ExitDelayUpdatedEvent.OutputObject
    >;
    ExitDelayUpdated: TypedContractEvent<
      ExitDelayUpdatedEvent.InputTuple,
      ExitDelayUpdatedEvent.OutputTuple,
      ExitDelayUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Join(address,uint256)": TypedContractEvent<
      JoinEvent.InputTuple,
      JoinEvent.OutputTuple,
      JoinEvent.OutputObject
    >;
    Join: TypedContractEvent<
      JoinEvent.InputTuple,
      JoinEvent.OutputTuple,
      JoinEvent.OutputObject
    >;

    "OperatorSet(address)": TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;
    OperatorSet: TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;

    "OperatorUnset(address)": TypedContractEvent<
      OperatorUnsetEvent.InputTuple,
      OperatorUnsetEvent.OutputTuple,
      OperatorUnsetEvent.OutputObject
    >;
    OperatorUnset: TypedContractEvent<
      OperatorUnsetEvent.InputTuple,
      OperatorUnsetEvent.OutputTuple,
      OperatorUnsetEvent.OutputObject
    >;

    "Redeem(address[])": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "Replenished(uint256)": TypedContractEvent<
      ReplenishedEvent.InputTuple,
      ReplenishedEvent.OutputTuple,
      ReplenishedEvent.OutputObject
    >;
    Replenished: TypedContractEvent<
      ReplenishedEvent.InputTuple,
      ReplenishedEvent.OutputTuple,
      ReplenishedEvent.OutputObject
    >;

    "SpreadUpdated(uint256)": TypedContractEvent<
      SpreadUpdatedEvent.InputTuple,
      SpreadUpdatedEvent.OutputTuple,
      SpreadUpdatedEvent.OutputObject
    >;
    SpreadUpdated: TypedContractEvent<
      SpreadUpdatedEvent.InputTuple,
      SpreadUpdatedEvent.OutputTuple,
      SpreadUpdatedEvent.OutputObject
    >;

    "Uncage()": TypedContractEvent<
      UncageEvent.InputTuple,
      UncageEvent.OutputTuple,
      UncageEvent.OutputObject
    >;
    Uncage: TypedContractEvent<
      UncageEvent.InputTuple,
      UncageEvent.OutputTuple,
      UncageEvent.OutputObject
    >;
  };
}
