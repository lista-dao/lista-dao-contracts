/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type SaleStruct = {
  pos: BigNumberish;
  tab: BigNumberish;
  lot: BigNumberish;
  usr: AddressLike;
  tic: BigNumberish;
  top: BigNumberish;
};

export type SaleStructOutput = [
  pos: bigint,
  tab: bigint,
  lot: bigint,
  usr: string,
  tic: bigint,
  top: bigint
] & {
  pos: bigint;
  tab: bigint;
  lot: bigint;
  usr: string;
  tic: bigint;
  top: bigint;
};

export interface InteractionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToWhitelist"
      | "availableToBorrow"
      | "borrow"
      | "borrowApr"
      | "borrowed"
      | "buyFromAuction"
      | "collateralPrice"
      | "collateralRate"
      | "collateralTVL"
      | "collaterals"
      | "currentLiquidationPrice"
      | "deny"
      | "deposit"
      | "depositTVL"
      | "deposits"
      | "disableWhitelist"
      | "dog"
      | "drip"
      | "dropRewards"
      | "enableWhitelist"
      | "estimatedLiquidationPrice"
      | "estimatedLiquidationPriceHAY"
      | "free"
      | "getAllActiveAuctionsForToken"
      | "getAuctionStatus"
      | "hay"
      | "hayJoin"
      | "hayPrice"
      | "helioProviders"
      | "helioRewards"
      | "initialize"
      | "jug"
      | "locked"
      | "owner"
      | "payback"
      | "poke"
      | "rely"
      | "removeCollateralType"
      | "removeFromWhitelist"
      | "renounceOwnership"
      | "resetAuction"
      | "setCollateralDuty"
      | "setCollateralType"
      | "setCores"
      | "setHayApprove"
      | "setHelioProvider"
      | "setRewards"
      | "setWhitelistOperator"
      | "spotter"
      | "startAuction"
      | "stringToBytes32"
      | "totalPegLiquidity"
      | "transferOwnership"
      | "upchostClipper"
      | "vat"
      | "wards"
      | "whitelist"
      | "whitelistMode"
      | "whitelistOperator"
      | "willBorrow"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionFinished"
      | "AuctionStarted"
      | "Borrow"
      | "CollateralDisabled"
      | "CollateralEnabled"
      | "Deposit"
      | "Initialized"
      | "Liquidation"
      | "OwnershipTransferred"
      | "Payback"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "availableToBorrow",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowApr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFromAuction",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTVL",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collaterals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentLiquidationPrice",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTVL",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dog", values?: undefined): string;
  encodeFunctionData(functionFragment: "drip", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "dropRewards",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedLiquidationPrice",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedLiquidationPriceHAY",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "free",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveAuctionsForToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hay", values?: undefined): string;
  encodeFunctionData(functionFragment: "hayJoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hayPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "helioProviders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "helioRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "jug", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poke", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "rely", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "removeCollateralType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetAuction",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralDuty",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralType",
    values: [AddressLike, AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCores",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHayApprove",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHelioProvider",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "spotter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPegLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upchostClipper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "willBorrow",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableToBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowApr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyFromAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTVL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTVL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dog", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dropRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedLiquidationPriceHAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "free", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveAuctionsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hayJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hayPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "helioProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "helioRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jug", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralDuty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCores", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHayApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHelioProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spotter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPegLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upchostClipper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "willBorrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AuctionFinishedEvent {
  export type InputTuple = [
    token: AddressLike,
    keeper: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, keeper: string, amount: bigint];
  export interface OutputObject {
    token: string;
    keeper: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionStartedEvent {
  export type InputTuple = [
    token: AddressLike,
    user: AddressLike,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    user: string,
    amount: bigint,
    price: bigint
  ];
  export interface OutputObject {
    token: string;
    user: string;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    user: AddressLike,
    collateral: AddressLike,
    collateralAmount: BigNumberish,
    amount: BigNumberish,
    liquidationPrice: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateral: string,
    collateralAmount: bigint,
    amount: bigint,
    liquidationPrice: bigint
  ];
  export interface OutputObject {
    user: string;
    collateral: string;
    collateralAmount: bigint;
    amount: bigint;
    liquidationPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDisabledEvent {
  export type InputTuple = [token: AddressLike, ilk: BytesLike];
  export type OutputTuple = [token: string, ilk: string];
  export interface OutputObject {
    token: string;
    ilk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralEnabledEvent {
  export type InputTuple = [token: AddressLike, ilk: BytesLike];
  export type OutputTuple = [token: string, ilk: string];
  export interface OutputObject {
    token: string;
    ilk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    collateral: AddressLike,
    amount: BigNumberish,
    totalAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateral: string,
    amount: bigint,
    totalAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    collateral: string;
    amount: bigint;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    user: AddressLike,
    collateral: AddressLike,
    amount: BigNumberish,
    leftover: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateral: string,
    amount: bigint,
    leftover: bigint
  ];
  export interface OutputObject {
    user: string;
    collateral: string;
    amount: bigint;
    leftover: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaybackEvent {
  export type InputTuple = [
    user: AddressLike,
    collateral: AddressLike,
    amount: BigNumberish,
    debt: BigNumberish,
    liquidationPrice: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateral: string,
    amount: bigint,
    debt: bigint,
    liquidationPrice: bigint
  ];
  export interface OutputObject {
    user: string;
    collateral: string;
    amount: bigint;
    debt: bigint;
    liquidationPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Interaction extends BaseContract {
  connect(runner?: ContractRunner | null): Interaction;
  waitForDeployment(): Promise<this>;

  interface: InteractionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToWhitelist: TypedContractMethod<
    [usrs: AddressLike[]],
    [void],
    "nonpayable"
  >;

  availableToBorrow: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;

  borrow: TypedContractMethod<
    [token: AddressLike, hayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  borrowApr: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  borrowed: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;

  buyFromAuction: TypedContractMethod<
    [
      token: AddressLike,
      auctionId: BigNumberish,
      collateralAmount: BigNumberish,
      maxPrice: BigNumberish,
      receiverAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  collateralPrice: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  collateralRate: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  collateralTVL: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  collaterals: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string] & {
        gem: string;
        ilk: string;
        live: bigint;
        clip: string;
      }
    ],
    "view"
  >;

  currentLiquidationPrice: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;

  deny: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  deposit: TypedContractMethod<
    [participant: AddressLike, token: AddressLike, dink: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  depositTVL: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  deposits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  disableWhitelist: TypedContractMethod<[], [void], "nonpayable">;

  dog: TypedContractMethod<[], [string], "view">;

  drip: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  dropRewards: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;

  enableWhitelist: TypedContractMethod<[], [void], "nonpayable">;

  estimatedLiquidationPrice: TypedContractMethod<
    [token: AddressLike, usr: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  estimatedLiquidationPriceHAY: TypedContractMethod<
    [token: AddressLike, usr: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  free: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;

  getAllActiveAuctionsForToken: TypedContractMethod<
    [token: AddressLike],
    [SaleStructOutput[]],
    "view"
  >;

  getAuctionStatus: TypedContractMethod<
    [token: AddressLike, auctionId: BigNumberish],
    [[boolean, bigint, bigint, bigint]],
    "view"
  >;

  hay: TypedContractMethod<[], [string], "view">;

  hayJoin: TypedContractMethod<[], [string], "view">;

  hayPrice: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  helioProviders: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  helioRewards: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      vat_: AddressLike,
      spot_: AddressLike,
      hay_: AddressLike,
      hayJoin_: AddressLike,
      jug_: AddressLike,
      dog_: AddressLike,
      rewards_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  jug: TypedContractMethod<[], [string], "view">;

  locked: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payback: TypedContractMethod<
    [token: AddressLike, hayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  poke: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  rely: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  removeCollateralType: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  removeFromWhitelist: TypedContractMethod<
    [usrs: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resetAuction: TypedContractMethod<
    [token: AddressLike, auctionId: BigNumberish, keeper: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollateralDuty: TypedContractMethod<
    [token: AddressLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCollateralType: TypedContractMethod<
    [
      token: AddressLike,
      gemJoin: AddressLike,
      ilk: BytesLike,
      clip: AddressLike,
      mat: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setCores: TypedContractMethod<
    [
      vat_: AddressLike,
      spot_: AddressLike,
      hayJoin_: AddressLike,
      jug_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setHayApprove: TypedContractMethod<[], [void], "nonpayable">;

  setHelioProvider: TypedContractMethod<
    [token: AddressLike, helioProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  setRewards: TypedContractMethod<[rewards: AddressLike], [void], "nonpayable">;

  setWhitelistOperator: TypedContractMethod<
    [usr: AddressLike],
    [void],
    "nonpayable"
  >;

  spotter: TypedContractMethod<[], [string], "view">;

  startAuction: TypedContractMethod<
    [token: AddressLike, user: AddressLike, keeper: AddressLike],
    [bigint],
    "nonpayable"
  >;

  stringToBytes32: TypedContractMethod<[source: string], [string], "view">;

  totalPegLiquidity: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upchostClipper: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  vat: TypedContractMethod<[], [string], "view">;

  wards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  whitelist: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  whitelistMode: TypedContractMethod<[], [bigint], "view">;

  whitelistOperator: TypedContractMethod<[], [string], "view">;

  willBorrow: TypedContractMethod<
    [token: AddressLike, usr: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [participant: AddressLike, token: AddressLike, dink: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<[usrs: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "availableToBorrow"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [token: AddressLike, hayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowApr"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowed"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "buyFromAuction"
  ): TypedContractMethod<
    [
      token: AddressLike,
      auctionId: BigNumberish,
      collateralAmount: BigNumberish,
      maxPrice: BigNumberish,
      receiverAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateralPrice"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralRate"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralTVL"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collaterals"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string] & {
        gem: string;
        ilk: string;
        live: bigint;
        clip: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentLiquidationPrice"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deny"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [participant: AddressLike, token: AddressLike, dink: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositTVL"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "disableWhitelist"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dog"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "drip"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dropRewards"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableWhitelist"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "estimatedLiquidationPrice"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimatedLiquidationPriceHAY"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "free"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllActiveAuctionsForToken"
  ): TypedContractMethod<[token: AddressLike], [SaleStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAuctionStatus"
  ): TypedContractMethod<
    [token: AddressLike, auctionId: BigNumberish],
    [[boolean, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "hay"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hayJoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hayPrice"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "helioProviders"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "helioRewards"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      vat_: AddressLike,
      spot_: AddressLike,
      hay_: AddressLike,
      hayJoin_: AddressLike,
      jug_: AddressLike,
      dog_: AddressLike,
      rewards_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "jug"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payback"
  ): TypedContractMethod<
    [token: AddressLike, hayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poke"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rely"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeCollateralType"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFromWhitelist"
  ): TypedContractMethod<[usrs: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetAuction"
  ): TypedContractMethod<
    [token: AddressLike, auctionId: BigNumberish, keeper: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCollateralDuty"
  ): TypedContractMethod<
    [token: AddressLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCollateralType"
  ): TypedContractMethod<
    [
      token: AddressLike,
      gemJoin: AddressLike,
      ilk: BytesLike,
      clip: AddressLike,
      mat: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCores"
  ): TypedContractMethod<
    [
      vat_: AddressLike,
      spot_: AddressLike,
      hayJoin_: AddressLike,
      jug_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHayApprove"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHelioProvider"
  ): TypedContractMethod<
    [token: AddressLike, helioProvider: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewards"
  ): TypedContractMethod<[rewards: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelistOperator"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "spotter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startAuction"
  ): TypedContractMethod<
    [token: AddressLike, user: AddressLike, keeper: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stringToBytes32"
  ): TypedContractMethod<[source: string], [string], "view">;
  getFunction(
    nameOrSignature: "totalPegLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upchostClipper"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistMode"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistOperator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "willBorrow"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [participant: AddressLike, token: AddressLike, dink: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "AuctionFinished"
  ): TypedContractEvent<
    AuctionFinishedEvent.InputTuple,
    AuctionFinishedEvent.OutputTuple,
    AuctionFinishedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionStarted"
  ): TypedContractEvent<
    AuctionStartedEvent.InputTuple,
    AuctionStartedEvent.OutputTuple,
    AuctionStartedEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDisabled"
  ): TypedContractEvent<
    CollateralDisabledEvent.InputTuple,
    CollateralDisabledEvent.OutputTuple,
    CollateralDisabledEvent.OutputObject
  >;
  getEvent(
    key: "CollateralEnabled"
  ): TypedContractEvent<
    CollateralEnabledEvent.InputTuple,
    CollateralEnabledEvent.OutputTuple,
    CollateralEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Payback"
  ): TypedContractEvent<
    PaybackEvent.InputTuple,
    PaybackEvent.OutputTuple,
    PaybackEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AuctionFinished(address,address,uint256)": TypedContractEvent<
      AuctionFinishedEvent.InputTuple,
      AuctionFinishedEvent.OutputTuple,
      AuctionFinishedEvent.OutputObject
    >;
    AuctionFinished: TypedContractEvent<
      AuctionFinishedEvent.InputTuple,
      AuctionFinishedEvent.OutputTuple,
      AuctionFinishedEvent.OutputObject
    >;

    "AuctionStarted(address,address,uint256,uint256)": TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;
    AuctionStarted: TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;

    "Borrow(address,address,uint256,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "CollateralDisabled(address,bytes32)": TypedContractEvent<
      CollateralDisabledEvent.InputTuple,
      CollateralDisabledEvent.OutputTuple,
      CollateralDisabledEvent.OutputObject
    >;
    CollateralDisabled: TypedContractEvent<
      CollateralDisabledEvent.InputTuple,
      CollateralDisabledEvent.OutputTuple,
      CollateralDisabledEvent.OutputObject
    >;

    "CollateralEnabled(address,bytes32)": TypedContractEvent<
      CollateralEnabledEvent.InputTuple,
      CollateralEnabledEvent.OutputTuple,
      CollateralEnabledEvent.OutputObject
    >;
    CollateralEnabled: TypedContractEvent<
      CollateralEnabledEvent.InputTuple,
      CollateralEnabledEvent.OutputTuple,
      CollateralEnabledEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Liquidation(address,address,uint256,uint256)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Payback(address,address,uint256,uint256,uint256)": TypedContractEvent<
      PaybackEvent.InputTuple,
      PaybackEvent.OutputTuple,
      PaybackEvent.OutputObject
    >;
    Payback: TypedContractEvent<
      PaybackEvent.InputTuple,
      PaybackEvent.OutputTuple,
      PaybackEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
