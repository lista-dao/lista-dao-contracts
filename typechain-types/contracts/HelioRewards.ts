/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HelioRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cage"
      | "claim"
      | "claimable"
      | "claimedRewards"
      | "deny"
      | "distributionApy"
      | "drop"
      | "helioPrice"
      | "helioToken"
      | "initPool"
      | "initialize"
      | "live"
      | "oracle"
      | "owner"
      | "pendingRewards"
      | "piles"
      | "poolLimit"
      | "pools"
      | "poolsList"
      | "rely"
      | "renounceOwnership"
      | "rewardsPool"
      | "rewardsRate"
      | "setHelioToken"
      | "setOracle"
      | "setRate"
      | "setRewardsMaxLimit"
      | "transferOwnership"
      | "uncage"
      | "unrealisedRewards"
      | "vat"
      | "wards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Cage"
      | "Claimed"
      | "HelioOracleChanged"
      | "HelioTokenChanged"
      | "Initialized"
      | "OwnershipTransferred"
      | "PoolInited"
      | "RateChanged"
      | "RewardsLimitChanged"
      | "Uncage"
  ): EventFragment;

  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "distributionApy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drop",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "helioPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "helioToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initPool",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "piles",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "poolLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "poolsList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHelioToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsMaxLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uncage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unrealisedRewards",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionApy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "helioPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "helioToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "piles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolsList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHelioToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsMaxLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uncage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unrealisedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
}

export namespace CageEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HelioOracleChangedEvent {
  export type InputTuple = [newOracle: AddressLike];
  export type OutputTuple = [newOracle: string];
  export interface OutputObject {
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HelioTokenChangedEvent {
  export type InputTuple = [newToken: AddressLike];
  export type OutputTuple = [newToken: string];
  export interface OutputObject {
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolInitedEvent {
  export type InputTuple = [token: AddressLike, rate: BigNumberish];
  export type OutputTuple = [token: string, rate: bigint];
  export interface OutputObject {
    token: string;
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateChangedEvent {
  export type InputTuple = [token: AddressLike, newRate: BigNumberish];
  export type OutputTuple = [token: string, newRate: bigint];
  export interface OutputObject {
    token: string;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsLimitChangedEvent {
  export type InputTuple = [newLimit: BigNumberish];
  export type OutputTuple = [newLimit: bigint];
  export interface OutputObject {
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UncageEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HelioRewards extends BaseContract {
  connect(runner?: ContractRunner | null): HelioRewards;
  waitForDeployment(): Promise<this>;

  interface: HelioRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cage: TypedContractMethod<[], [void], "nonpayable">;

  claim: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  claimable: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;

  claimedRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  deny: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  distributionApy: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  drop: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;

  helioPrice: TypedContractMethod<[], [bigint], "view">;

  helioToken: TypedContractMethod<[], [string], "view">;

  initPool: TypedContractMethod<
    [token: AddressLike, ilk: BytesLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [vat_: AddressLike, poolLimit_: BigNumberish],
    [void],
    "nonpayable"
  >;

  live: TypedContractMethod<[], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRewards: TypedContractMethod<[usr: AddressLike], [bigint], "view">;

  piles: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { amount: bigint; ts: bigint }],
    "view"
  >;

  poolLimit: TypedContractMethod<[], [bigint], "view">;

  pools: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string] & {
        rewardRate: bigint;
        rho: bigint;
        ilk: string;
      }
    ],
    "view"
  >;

  poolsList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rely: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardsPool: TypedContractMethod<[], [bigint], "view">;

  rewardsRate: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  setHelioToken: TypedContractMethod<
    [helioToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<[oracle_: AddressLike], [void], "nonpayable">;

  setRate: TypedContractMethod<
    [token: AddressLike, newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardsMaxLimit: TypedContractMethod<
    [newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uncage: TypedContractMethod<[], [void], "nonpayable">;

  unrealisedRewards: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;

  vat: TypedContractMethod<[], [string], "view">;

  wards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimable"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimedRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deny"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributionApy"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "drop"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "helioPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "helioToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initPool"
  ): TypedContractMethod<
    [token: AddressLike, ilk: BytesLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [vat_: AddressLike, poolLimit_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "live"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRewards"
  ): TypedContractMethod<[usr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "piles"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { amount: bigint; ts: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string] & {
        rewardRate: bigint;
        rho: bigint;
        ilk: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolsList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rely"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardsPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardsRate"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setHelioToken"
  ): TypedContractMethod<[helioToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[oracle_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRate"
  ): TypedContractMethod<
    [token: AddressLike, newRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardsMaxLimit"
  ): TypedContractMethod<[newLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uncage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unrealisedRewards"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "vat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Cage"
  ): TypedContractEvent<
    CageEvent.InputTuple,
    CageEvent.OutputTuple,
    CageEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "HelioOracleChanged"
  ): TypedContractEvent<
    HelioOracleChangedEvent.InputTuple,
    HelioOracleChangedEvent.OutputTuple,
    HelioOracleChangedEvent.OutputObject
  >;
  getEvent(
    key: "HelioTokenChanged"
  ): TypedContractEvent<
    HelioTokenChangedEvent.InputTuple,
    HelioTokenChangedEvent.OutputTuple,
    HelioTokenChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolInited"
  ): TypedContractEvent<
    PoolInitedEvent.InputTuple,
    PoolInitedEvent.OutputTuple,
    PoolInitedEvent.OutputObject
  >;
  getEvent(
    key: "RateChanged"
  ): TypedContractEvent<
    RateChangedEvent.InputTuple,
    RateChangedEvent.OutputTuple,
    RateChangedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsLimitChanged"
  ): TypedContractEvent<
    RewardsLimitChangedEvent.InputTuple,
    RewardsLimitChangedEvent.OutputTuple,
    RewardsLimitChangedEvent.OutputObject
  >;
  getEvent(
    key: "Uncage"
  ): TypedContractEvent<
    UncageEvent.InputTuple,
    UncageEvent.OutputTuple,
    UncageEvent.OutputObject
  >;

  filters: {
    "Cage(address)": TypedContractEvent<
      CageEvent.InputTuple,
      CageEvent.OutputTuple,
      CageEvent.OutputObject
    >;
    Cage: TypedContractEvent<
      CageEvent.InputTuple,
      CageEvent.OutputTuple,
      CageEvent.OutputObject
    >;

    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "HelioOracleChanged(address)": TypedContractEvent<
      HelioOracleChangedEvent.InputTuple,
      HelioOracleChangedEvent.OutputTuple,
      HelioOracleChangedEvent.OutputObject
    >;
    HelioOracleChanged: TypedContractEvent<
      HelioOracleChangedEvent.InputTuple,
      HelioOracleChangedEvent.OutputTuple,
      HelioOracleChangedEvent.OutputObject
    >;

    "HelioTokenChanged(address)": TypedContractEvent<
      HelioTokenChangedEvent.InputTuple,
      HelioTokenChangedEvent.OutputTuple,
      HelioTokenChangedEvent.OutputObject
    >;
    HelioTokenChanged: TypedContractEvent<
      HelioTokenChangedEvent.InputTuple,
      HelioTokenChangedEvent.OutputTuple,
      HelioTokenChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolInited(address,uint256)": TypedContractEvent<
      PoolInitedEvent.InputTuple,
      PoolInitedEvent.OutputTuple,
      PoolInitedEvent.OutputObject
    >;
    PoolInited: TypedContractEvent<
      PoolInitedEvent.InputTuple,
      PoolInitedEvent.OutputTuple,
      PoolInitedEvent.OutputObject
    >;

    "RateChanged(address,uint256)": TypedContractEvent<
      RateChangedEvent.InputTuple,
      RateChangedEvent.OutputTuple,
      RateChangedEvent.OutputObject
    >;
    RateChanged: TypedContractEvent<
      RateChangedEvent.InputTuple,
      RateChangedEvent.OutputTuple,
      RateChangedEvent.OutputObject
    >;

    "RewardsLimitChanged(uint256)": TypedContractEvent<
      RewardsLimitChangedEvent.InputTuple,
      RewardsLimitChangedEvent.OutputTuple,
      RewardsLimitChangedEvent.OutputObject
    >;
    RewardsLimitChanged: TypedContractEvent<
      RewardsLimitChangedEvent.InputTuple,
      RewardsLimitChangedEvent.OutputTuple,
      RewardsLimitChangedEvent.OutputObject
    >;

    "Uncage(address)": TypedContractEvent<
      UncageEvent.InputTuple,
      UncageEvent.OutputTuple,
      UncageEvent.OutputObject
    >;
    Uncage: TypedContractEvent<
      UncageEvent.InputTuple,
      UncageEvent.OutputTuple,
      UncageEvent.OutputObject
    >;
  };
}
