/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Line"
      | "behalf"
      | "cage"
      | "can"
      | "debt"
      | "deny"
      | "file(bytes32,bytes32,uint256)"
      | "file(bytes32,uint256)"
      | "flux"
      | "fold"
      | "fork"
      | "frob"
      | "gem"
      | "grab"
      | "hay"
      | "heal"
      | "hope"
      | "ilks"
      | "init"
      | "initialize"
      | "live"
      | "move"
      | "nope"
      | "owner"
      | "regard"
      | "rely"
      | "renounceOwnership"
      | "sin"
      | "slip"
      | "suck"
      | "transferOwnership"
      | "uncage"
      | "urns"
      | "vice"
      | "wards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "Line", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "behalf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "can",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,bytes32,uint256)",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,uint256)",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flux",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fold",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fork",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frob",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gem",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grab",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "hay", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "heal", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "hope", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "ilks", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nope", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "regard",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sin", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "slip",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "suck",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uncage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "urns",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vice", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "Line", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "behalf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "can", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flux", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "regard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "suck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uncage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vat extends BaseContract {
  connect(runner?: ContractRunner | null): Vat;
  waitForDeployment(): Promise<this>;

  interface: VatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Line: TypedContractMethod<[], [bigint], "view">;

  behalf: TypedContractMethod<
    [bit: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;

  cage: TypedContractMethod<[], [void], "nonpayable">;

  can: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  debt: TypedContractMethod<[], [bigint], "view">;

  deny: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  "file(bytes32,bytes32,uint256)": TypedContractMethod<
    [ilk: BytesLike, what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;

  "file(bytes32,uint256)": TypedContractMethod<
    [what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;

  flux: TypedContractMethod<
    [ilk: BytesLike, src: AddressLike, dst: AddressLike, wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  fold: TypedContractMethod<
    [i: BytesLike, u: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  fork: TypedContractMethod<
    [
      ilk: BytesLike,
      src: AddressLike,
      dst: AddressLike,
      dink: BigNumberish,
      dart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  frob: TypedContractMethod<
    [
      i: BytesLike,
      u: AddressLike,
      v: AddressLike,
      w: AddressLike,
      dink: BigNumberish,
      dart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  gem: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  grab: TypedContractMethod<
    [
      i: BytesLike,
      u: AddressLike,
      v: AddressLike,
      w: AddressLike,
      dink: BigNumberish,
      dart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  hay: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  heal: TypedContractMethod<[rad: BigNumberish], [void], "nonpayable">;

  hope: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  ilks: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        Art: bigint;
        rate: bigint;
        spot: bigint;
        line: bigint;
        dust: bigint;
      }
    ],
    "view"
  >;

  init: TypedContractMethod<[ilk: BytesLike], [void], "nonpayable">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  live: TypedContractMethod<[], [bigint], "view">;

  move: TypedContractMethod<
    [src: AddressLike, dst: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;

  nope: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  regard: TypedContractMethod<
    [bit: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;

  rely: TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sin: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  slip: TypedContractMethod<
    [ilk: BytesLike, usr: AddressLike, wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  suck: TypedContractMethod<
    [u: AddressLike, v: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uncage: TypedContractMethod<[], [void], "nonpayable">;

  urns: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [[bigint, bigint] & { ink: bigint; art: bigint }],
    "view"
  >;

  vice: TypedContractMethod<[], [bigint], "view">;

  wards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Line"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "behalf"
  ): TypedContractMethod<
    [bit: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "can"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "debt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deny"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "file(bytes32,bytes32,uint256)"
  ): TypedContractMethod<
    [ilk: BytesLike, what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "file(bytes32,uint256)"
  ): TypedContractMethod<
    [what: BytesLike, data: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flux"
  ): TypedContractMethod<
    [ilk: BytesLike, src: AddressLike, dst: AddressLike, wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fold"
  ): TypedContractMethod<
    [i: BytesLike, u: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fork"
  ): TypedContractMethod<
    [
      ilk: BytesLike,
      src: AddressLike,
      dst: AddressLike,
      dink: BigNumberish,
      dart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "frob"
  ): TypedContractMethod<
    [
      i: BytesLike,
      u: AddressLike,
      v: AddressLike,
      w: AddressLike,
      dink: BigNumberish,
      dart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gem"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grab"
  ): TypedContractMethod<
    [
      i: BytesLike,
      u: AddressLike,
      v: AddressLike,
      w: AddressLike,
      dink: BigNumberish,
      dart: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hay"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "heal"
  ): TypedContractMethod<[rad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hope"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ilks"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        Art: bigint;
        rate: bigint;
        spot: bigint;
        line: bigint;
        dust: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[ilk: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "live"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "move"
  ): TypedContractMethod<
    [src: AddressLike, dst: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nope"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "regard"
  ): TypedContractMethod<
    [bit: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rely"
  ): TypedContractMethod<[usr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sin"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "slip"
  ): TypedContractMethod<
    [ilk: BytesLike, usr: AddressLike, wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "suck"
  ): TypedContractMethod<
    [u: AddressLike, v: AddressLike, rad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uncage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "urns"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [[bigint, bigint] & { ink: bigint; art: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "vice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
