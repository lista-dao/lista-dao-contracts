/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ABNBbInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "bondsToShares"
      | "burnAndSetPending"
      | "burnAndSetPendingFor"
      | "burnBonds"
      | "changeABNBcToken"
      | "changeBinancePool"
      | "changeCrossChainBridge"
      | "changeOperator"
      | "changeSwapFeeParams"
      | "decimals"
      | "decreaseAllowance"
      | "increaseAllowance"
      | "initialize"
      | "isRebasing"
      | "lockShares"
      | "lockSharesFor"
      | "lockedSharesOf"
      | "lockedSupply"
      | "mint"
      | "mintBonds"
      | "name"
      | "owner"
      | "pendingBurn"
      | "ratio"
      | "renounceOwnership"
      | "repairRatio"
      | "sharesToBonds"
      | "symbol"
      | "totalSharesSupply"
      | "totalStaked"
      | "totalSupply"
      | "totalUnbondedBonds"
      | "transfer"
      | "transferAndLockShares"
      | "transferFrom"
      | "transferOwnership"
      | "unlockShares"
      | "unlockSharesFor"
      | "updatePendingBurning"
      | "updateRatio"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BinancePoolChanged"
      | "CertTokenChanged"
      | "CrossChainBridgeChanged"
      | "Initialized"
      | "Locked"
      | "OperatorChanged"
      | "OwnershipTransferred"
      | "RatioUpdated"
      | "Transfer"
      | "Unlocked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bondsToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAndSetPending",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAndSetPendingFor",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBonds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeABNBcToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBinancePool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCrossChainBridge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSwapFeeParams",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRebasing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSharesFor",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSharesOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBonds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingBurn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "ratio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repairRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesToBonds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSharesSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnbondedBonds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndLockShares",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockSharesFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePendingBurning",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRatio",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondsToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAndSetPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAndSetPendingFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnBonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeABNBcToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBinancePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCrossChainBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSwapFeeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRebasing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockSharesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedSharesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBonds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ratio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repairRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesToBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSharesSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnbondedBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAndLockShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockSharesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePendingBurning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRatio",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BinancePoolChangedEvent {
  export type InputTuple = [binancePool: AddressLike];
  export type OutputTuple = [binancePool: string];
  export interface OutputObject {
    binancePool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertTokenChangedEvent {
  export type InputTuple = [certToken: AddressLike];
  export type OutputTuple = [certToken: string];
  export interface OutputObject {
    certToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainBridgeChangedEvent {
  export type InputTuple = [crossChainBridge: AddressLike];
  export type OutputTuple = [crossChainBridge: string];
  export interface OutputObject {
    crossChainBridge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockedEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorChangedEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatioUpdatedEvent {
  export type InputTuple = [newRatio: BigNumberish];
  export type OutputTuple = [newRatio: bigint];
  export interface OutputObject {
    newRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockedEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ABNBb extends BaseContract {
  connect(runner?: ContractRunner | null): ABNBb;
  waitForDeployment(): Promise<this>;

  interface: ABNBbInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  bondsToShares: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  burnAndSetPending: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  burnAndSetPendingFor: TypedContractMethod<
    [owner: AddressLike, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  burnBonds: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeABNBcToken: TypedContractMethod<
    [aBNBcAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  changeBinancePool: TypedContractMethod<
    [binancePool: AddressLike],
    [void],
    "nonpayable"
  >;

  changeCrossChainBridge: TypedContractMethod<
    [crossChainBridge: AddressLike],
    [void],
    "nonpayable"
  >;

  changeOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  changeSwapFeeParams: TypedContractMethod<
    [swapFeeOperator: AddressLike, swapFeeRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  isRebasing: TypedContractMethod<[], [boolean], "view">;

  lockShares: TypedContractMethod<[shares: BigNumberish], [void], "nonpayable">;

  lockSharesFor: TypedContractMethod<
    [spender: AddressLike, account: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;

  lockedSharesOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  lockedSupply: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [account: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintBonds: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingBurn: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  ratio: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repairRatio: TypedContractMethod<
    [newRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  sharesToBonds: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSharesSupply: TypedContractMethod<[], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalUnbondedBonds: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferAndLockShares: TypedContractMethod<
    [account: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockShares: TypedContractMethod<
    [shares: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlockSharesFor: TypedContractMethod<
    [account: AddressLike, bonds: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePendingBurning: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRatio: TypedContractMethod<
    [totalRewards: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bondsToShares"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnAndSetPending"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnAndSetPendingFor"
  ): TypedContractMethod<
    [owner: AddressLike, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnBonds"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeABNBcToken"
  ): TypedContractMethod<[aBNBcAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeBinancePool"
  ): TypedContractMethod<[binancePool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeCrossChainBridge"
  ): TypedContractMethod<[crossChainBridge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeSwapFeeParams"
  ): TypedContractMethod<
    [swapFeeOperator: AddressLike, swapFeeRatio: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isRebasing"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockShares"
  ): TypedContractMethod<[shares: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockSharesFor"
  ): TypedContractMethod<
    [spender: AddressLike, account: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockedSharesOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockedSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [account: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintBonds"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingBurn"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ratio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repairRatio"
  ): TypedContractMethod<[newRatio: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sharesToBonds"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSharesSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUnbondedBonds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferAndLockShares"
  ): TypedContractMethod<
    [account: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockShares"
  ): TypedContractMethod<[shares: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockSharesFor"
  ): TypedContractMethod<
    [account: AddressLike, bonds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePendingBurning"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRatio"
  ): TypedContractMethod<[totalRewards: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BinancePoolChanged"
  ): TypedContractEvent<
    BinancePoolChangedEvent.InputTuple,
    BinancePoolChangedEvent.OutputTuple,
    BinancePoolChangedEvent.OutputObject
  >;
  getEvent(
    key: "CertTokenChanged"
  ): TypedContractEvent<
    CertTokenChangedEvent.InputTuple,
    CertTokenChangedEvent.OutputTuple,
    CertTokenChangedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainBridgeChanged"
  ): TypedContractEvent<
    CrossChainBridgeChangedEvent.InputTuple,
    CrossChainBridgeChangedEvent.OutputTuple,
    CrossChainBridgeChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Locked"
  ): TypedContractEvent<
    LockedEvent.InputTuple,
    LockedEvent.OutputTuple,
    LockedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorChanged"
  ): TypedContractEvent<
    OperatorChangedEvent.InputTuple,
    OperatorChangedEvent.OutputTuple,
    OperatorChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RatioUpdated"
  ): TypedContractEvent<
    RatioUpdatedEvent.InputTuple,
    RatioUpdatedEvent.OutputTuple,
    RatioUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unlocked"
  ): TypedContractEvent<
    UnlockedEvent.InputTuple,
    UnlockedEvent.OutputTuple,
    UnlockedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BinancePoolChanged(address)": TypedContractEvent<
      BinancePoolChangedEvent.InputTuple,
      BinancePoolChangedEvent.OutputTuple,
      BinancePoolChangedEvent.OutputObject
    >;
    BinancePoolChanged: TypedContractEvent<
      BinancePoolChangedEvent.InputTuple,
      BinancePoolChangedEvent.OutputTuple,
      BinancePoolChangedEvent.OutputObject
    >;

    "CertTokenChanged(address)": TypedContractEvent<
      CertTokenChangedEvent.InputTuple,
      CertTokenChangedEvent.OutputTuple,
      CertTokenChangedEvent.OutputObject
    >;
    CertTokenChanged: TypedContractEvent<
      CertTokenChangedEvent.InputTuple,
      CertTokenChangedEvent.OutputTuple,
      CertTokenChangedEvent.OutputObject
    >;

    "CrossChainBridgeChanged(address)": TypedContractEvent<
      CrossChainBridgeChangedEvent.InputTuple,
      CrossChainBridgeChangedEvent.OutputTuple,
      CrossChainBridgeChangedEvent.OutputObject
    >;
    CrossChainBridgeChanged: TypedContractEvent<
      CrossChainBridgeChangedEvent.InputTuple,
      CrossChainBridgeChangedEvent.OutputTuple,
      CrossChainBridgeChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Locked(address,uint256)": TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;
    Locked: TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;

    "OperatorChanged(address)": TypedContractEvent<
      OperatorChangedEvent.InputTuple,
      OperatorChangedEvent.OutputTuple,
      OperatorChangedEvent.OutputObject
    >;
    OperatorChanged: TypedContractEvent<
      OperatorChangedEvent.InputTuple,
      OperatorChangedEvent.OutputTuple,
      OperatorChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RatioUpdated(uint256)": TypedContractEvent<
      RatioUpdatedEvent.InputTuple,
      RatioUpdatedEvent.OutputTuple,
      RatioUpdatedEvent.OutputObject
    >;
    RatioUpdated: TypedContractEvent<
      RatioUpdatedEvent.InputTuple,
      RatioUpdatedEvent.OutputTuple,
      RatioUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unlocked(address,uint256)": TypedContractEvent<
      UnlockedEvent.InputTuple,
      UnlockedEvent.OutputTuple,
      UnlockedEvent.OutputObject
    >;
    Unlocked: TypedContractEvent<
      UnlockedEvent.InputTuple,
      UnlockedEvent.OutputTuple,
      UnlockedEvent.OutputObject
    >;
  };
}
