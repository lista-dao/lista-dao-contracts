/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IStakeManager {
  export type WithdrawalRequestStruct = {
    uuid: BigNumberish;
    amountInBnbX: BigNumberish;
    startTime: BigNumberish;
  };

  export type WithdrawalRequestStructOutput = [
    uuid: bigint,
    amountInBnbX: bigint,
    startTime: bigint
  ] & { uuid: bigint; amountInBnbX: bigint; startTime: bigint };
}

export interface BnbxStakeManagerMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeBnbx"
      | "changeER"
      | "claimWithdraw"
      | "convertBnbToBnbX"
      | "convertBnbXToBnb"
      | "deposit"
      | "getUserRequestStatus"
      | "getUserWithdrawalRequests"
      | "requestWithdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeBnbx",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeER",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertBnbToBnbX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertBnbXToBnb",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserRequestStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWithdrawalRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "changeBnbx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertBnbToBnbX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertBnbXToBnb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRequestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWithdrawalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdraw",
    data: BytesLike
  ): Result;
}

export interface BnbxStakeManagerMock extends BaseContract {
  connect(runner?: ContractRunner | null): BnbxStakeManagerMock;
  waitForDeployment(): Promise<this>;

  interface: BnbxStakeManagerMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeBnbx: TypedContractMethod<[_bnbX: AddressLike], [void], "nonpayable">;

  changeER: TypedContractMethod<[er: BigNumberish], [void], "nonpayable">;

  claimWithdraw: TypedContractMethod<
    [_idx: BigNumberish],
    [void],
    "nonpayable"
  >;

  convertBnbToBnbX: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "view"
  >;

  convertBnbXToBnb: TypedContractMethod<
    [_amountInBnbX: BigNumberish],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<[], [void], "payable">;

  getUserRequestStatus: TypedContractMethod<
    [_user: AddressLike, _idx: BigNumberish],
    [[boolean, bigint] & { _isClaimable: boolean; _amount: bigint }],
    "view"
  >;

  getUserWithdrawalRequests: TypedContractMethod<
    [_address: AddressLike],
    [IStakeManager.WithdrawalRequestStructOutput[]],
    "view"
  >;

  requestWithdraw: TypedContractMethod<
    [_amountInBnbX: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeBnbx"
  ): TypedContractMethod<[_bnbX: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeER"
  ): TypedContractMethod<[er: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimWithdraw"
  ): TypedContractMethod<[_idx: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "convertBnbToBnbX"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertBnbXToBnb"
  ): TypedContractMethod<[_amountInBnbX: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getUserRequestStatus"
  ): TypedContractMethod<
    [_user: AddressLike, _idx: BigNumberish],
    [[boolean, bigint] & { _isClaimable: boolean; _amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserWithdrawalRequests"
  ): TypedContractMethod<
    [_address: AddressLike],
    [IStakeManager.WithdrawalRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestWithdraw"
  ): TypedContractMethod<[_amountInBnbX: BigNumberish], [void], "nonpayable">;

  filters: {};
}
