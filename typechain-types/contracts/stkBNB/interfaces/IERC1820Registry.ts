/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IERC1820RegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getInterfaceImplementer"
      | "getManager"
      | "implementsERC165Interface"
      | "implementsERC165InterfaceNoCache"
      | "interfaceHash"
      | "setInterfaceImplementer"
      | "setManager"
      | "updateERC165Cache"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "InterfaceImplementerSet" | "ManagerChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getInterfaceImplementer",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementsERC165Interface",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementsERC165InterfaceNoCache",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interfaceHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterfaceImplementer",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateERC165Cache",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getInterfaceImplementer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementsERC165Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementsERC165InterfaceNoCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interfaceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterfaceImplementer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateERC165Cache",
    data: BytesLike
  ): Result;
}

export namespace InterfaceImplementerSetEvent {
  export type InputTuple = [
    account: AddressLike,
    interfaceHash: BytesLike,
    implementer: AddressLike
  ];
  export type OutputTuple = [
    account: string,
    interfaceHash: string,
    implementer: string
  ];
  export interface OutputObject {
    account: string;
    interfaceHash: string;
    implementer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerChangedEvent {
  export type InputTuple = [account: AddressLike, newManager: AddressLike];
  export type OutputTuple = [account: string, newManager: string];
  export interface OutputObject {
    account: string;
    newManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC1820Registry extends BaseContract {
  connect(runner?: ContractRunner | null): IERC1820Registry;
  waitForDeployment(): Promise<this>;

  interface: IERC1820RegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getInterfaceImplementer: TypedContractMethod<
    [account: AddressLike, _interfaceHash: BytesLike],
    [string],
    "view"
  >;

  getManager: TypedContractMethod<[account: AddressLike], [string], "view">;

  implementsERC165Interface: TypedContractMethod<
    [account: AddressLike, interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  implementsERC165InterfaceNoCache: TypedContractMethod<
    [account: AddressLike, interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  interfaceHash: TypedContractMethod<[interfaceName: string], [string], "view">;

  setInterfaceImplementer: TypedContractMethod<
    [account: AddressLike, _interfaceHash: BytesLike, implementer: AddressLike],
    [void],
    "nonpayable"
  >;

  setManager: TypedContractMethod<
    [account: AddressLike, newManager: AddressLike],
    [void],
    "nonpayable"
  >;

  updateERC165Cache: TypedContractMethod<
    [account: AddressLike, interfaceId: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getInterfaceImplementer"
  ): TypedContractMethod<
    [account: AddressLike, _interfaceHash: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getManager"
  ): TypedContractMethod<[account: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "implementsERC165Interface"
  ): TypedContractMethod<
    [account: AddressLike, interfaceId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "implementsERC165InterfaceNoCache"
  ): TypedContractMethod<
    [account: AddressLike, interfaceId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "interfaceHash"
  ): TypedContractMethod<[interfaceName: string], [string], "view">;
  getFunction(
    nameOrSignature: "setInterfaceImplementer"
  ): TypedContractMethod<
    [account: AddressLike, _interfaceHash: BytesLike, implementer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<
    [account: AddressLike, newManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateERC165Cache"
  ): TypedContractMethod<
    [account: AddressLike, interfaceId: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "InterfaceImplementerSet"
  ): TypedContractEvent<
    InterfaceImplementerSetEvent.InputTuple,
    InterfaceImplementerSetEvent.OutputTuple,
    InterfaceImplementerSetEvent.OutputObject
  >;
  getEvent(
    key: "ManagerChanged"
  ): TypedContractEvent<
    ManagerChangedEvent.InputTuple,
    ManagerChangedEvent.OutputTuple,
    ManagerChangedEvent.OutputObject
  >;

  filters: {
    "InterfaceImplementerSet(address,bytes32,address)": TypedContractEvent<
      InterfaceImplementerSetEvent.InputTuple,
      InterfaceImplementerSetEvent.OutputTuple,
      InterfaceImplementerSetEvent.OutputObject
    >;
    InterfaceImplementerSet: TypedContractEvent<
      InterfaceImplementerSetEvent.InputTuple,
      InterfaceImplementerSetEvent.OutputTuple,
      InterfaceImplementerSetEvent.OutputObject
    >;

    "ManagerChanged(address,address)": TypedContractEvent<
      ManagerChangedEvent.InputTuple,
      ManagerChangedEvent.OutputTuple,
      ManagerChangedEvent.OutputObject
    >;
    ManagerChanged: TypedContractEvent<
      ManagerChangedEvent.InputTuple,
      ManagerChangedEvent.OutputTuple,
      ManagerChangedEvent.OutputObject
    >;
  };
}
