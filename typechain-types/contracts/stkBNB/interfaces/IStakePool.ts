/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IStakePool {
  export type FeeDistributionStruct = {
    reward: BigNumberish;
    deposit: BigNumberish;
    withdraw: BigNumberish;
  };

  export type FeeDistributionStructOutput = [
    reward: bigint,
    deposit: bigint,
    withdraw: bigint
  ] & { reward: bigint; deposit: bigint; withdraw: bigint };

  export type ConfigStruct = {
    bcStakingWallet: AddressLike;
    minCrossChainTransfer: BigNumberish;
    transferOutTimeout: BigNumberish;
    minBNBDeposit: BigNumberish;
    minTokenWithdrawal: BigNumberish;
    cooldownPeriod: BigNumberish;
    fee: IStakePool.FeeDistributionStruct;
  };

  export type ConfigStructOutput = [
    bcStakingWallet: string,
    minCrossChainTransfer: bigint,
    transferOutTimeout: bigint,
    minBNBDeposit: bigint,
    minTokenWithdrawal: bigint,
    cooldownPeriod: bigint,
    fee: IStakePool.FeeDistributionStructOutput
  ] & {
    bcStakingWallet: string;
    minCrossChainTransfer: bigint;
    transferOutTimeout: bigint;
    minBNBDeposit: bigint;
    minTokenWithdrawal: bigint;
    cooldownPeriod: bigint;
    fee: IStakePool.FeeDistributionStructOutput;
  };
}

export declare namespace ExchangeRate {
  export type DataStruct = {
    totalWei: BigNumberish;
    poolTokenSupply: BigNumberish;
  };

  export type DataStructOutput = [totalWei: bigint, poolTokenSupply: bigint] & {
    totalWei: bigint;
    poolTokenSupply: bigint;
  };
}

export interface IStakePoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "claimAll"
      | "config"
      | "deposit"
      | "exchangeRate"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "claimAll", values?: undefined): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
}

export interface IStakePool extends BaseContract {
  connect(runner?: ContractRunner | null): IStakePool;
  waitForDeployment(): Promise<this>;

  interface: IStakePoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;

  claimAll: TypedContractMethod<[], [void], "nonpayable">;

  config: TypedContractMethod<[], [IStakePool.ConfigStructOutput], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  exchangeRate: TypedContractMethod<
    [],
    [ExchangeRate.DataStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<[], [IStakePool.ConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "exchangeRate"
  ): TypedContractMethod<[], [ExchangeRate.DataStructOutput], "view">;

  filters: {};
}
