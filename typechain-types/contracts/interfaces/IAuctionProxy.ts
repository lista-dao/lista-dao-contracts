/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SaleStruct = {
  pos: BigNumberish;
  tab: BigNumberish;
  lot: BigNumberish;
  usr: AddressLike;
  tic: BigNumberish;
  top: BigNumberish;
};

export type SaleStructOutput = [
  pos: bigint,
  tab: bigint,
  lot: bigint,
  usr: string,
  tic: bigint,
  top: bigint
] & {
  pos: bigint;
  tab: bigint;
  lot: bigint;
  usr: string;
  tic: bigint;
  top: bigint;
};

export interface IAuctionProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyFromAuction"
      | "getAllActiveAuctionsForToken"
      | "startAuction"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Liquidation"): EventFragment;

  encodeFunctionData(
    functionFragment: "buyFromAuction",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveAuctionsForToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyFromAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveAuctionsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    user: AddressLike,
    collateral: AddressLike,
    amount: BigNumberish,
    leftover: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateral: string,
    amount: bigint,
    leftover: bigint
  ];
  export interface OutputObject {
    user: string;
    collateral: string;
    amount: bigint;
    leftover: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAuctionProxy extends BaseContract {
  connect(runner?: ContractRunner | null): IAuctionProxy;
  waitForDeployment(): Promise<this>;

  interface: IAuctionProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyFromAuction: TypedContractMethod<
    [
      user: AddressLike,
      auctionId: BigNumberish,
      collateralAmount: BigNumberish,
      maxPrice: BigNumberish,
      receiverAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getAllActiveAuctionsForToken: TypedContractMethod<
    [token: AddressLike],
    [SaleStructOutput[]],
    "view"
  >;

  startAuction: TypedContractMethod<
    [token: AddressLike, user: AddressLike, keeper: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyFromAuction"
  ): TypedContractMethod<
    [
      user: AddressLike,
      auctionId: BigNumberish,
      collateralAmount: BigNumberish,
      maxPrice: BigNumberish,
      receiverAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllActiveAuctionsForToken"
  ): TypedContractMethod<[token: AddressLike], [SaleStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "startAuction"
  ): TypedContractMethod<
    [token: AddressLike, user: AddressLike, keeper: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;

  filters: {
    "Liquidation(address,address,uint256,uint256)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
  };
}
