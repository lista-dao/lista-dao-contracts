/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SaleStruct = {
  pos: BigNumberish;
  tab: BigNumberish;
  lot: BigNumberish;
  usr: AddressLike;
  tic: BigNumberish;
  top: BigNumberish;
};

export type SaleStructOutput = [
  pos: bigint,
  tab: bigint,
  lot: bigint,
  usr: string,
  tic: bigint,
  top: bigint
] & {
  pos: bigint;
  tab: bigint;
  lot: bigint;
  usr: string;
  tic: bigint;
  top: bigint;
};

export interface ClipperLikeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "count"
      | "getStatus"
      | "ilk"
      | "kick"
      | "kicks"
      | "list"
      | "redo"
      | "sales"
      | "take"
      | "upchost"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ilk", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "kicks", values?: undefined): string;
  encodeFunctionData(functionFragment: "list", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "sales", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upchost", values?: undefined): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kicks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upchost", data: BytesLike): Result;
}

export interface ClipperLike extends BaseContract {
  connect(runner?: ContractRunner | null): ClipperLike;
  waitForDeployment(): Promise<this>;

  interface: ClipperLikeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  count: TypedContractMethod<[], [bigint], "view">;

  getStatus: TypedContractMethod<
    [id: BigNumberish],
    [[boolean, bigint, bigint, bigint]],
    "view"
  >;

  ilk: TypedContractMethod<[], [string], "view">;

  kick: TypedContractMethod<
    [tab: BigNumberish, lot: BigNumberish, usr: AddressLike, kpr: AddressLike],
    [bigint],
    "nonpayable"
  >;

  kicks: TypedContractMethod<[], [bigint], "view">;

  list: TypedContractMethod<[], [bigint[]], "view">;

  redo: TypedContractMethod<
    [id: BigNumberish, kpr: AddressLike],
    [void],
    "nonpayable"
  >;

  sales: TypedContractMethod<
    [auctionId: BigNumberish],
    [SaleStructOutput],
    "view"
  >;

  take: TypedContractMethod<
    [
      id: BigNumberish,
      amt: BigNumberish,
      max: BigNumberish,
      who: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  upchost: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStatus"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[boolean, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "ilk"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "kick"
  ): TypedContractMethod<
    [tab: BigNumberish, lot: BigNumberish, usr: AddressLike, kpr: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "kicks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "list"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "redo"
  ): TypedContractMethod<
    [id: BigNumberish, kpr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sales"
  ): TypedContractMethod<[auctionId: BigNumberish], [SaleStructOutput], "view">;
  getFunction(
    nameOrSignature: "take"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      amt: BigNumberish,
      max: BigNumberish,
      who: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upchost"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
