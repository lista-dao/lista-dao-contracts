/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IRewardsInterface extends Interface {
  getFunction(nameOrSignature: "drop"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Cage"
      | "Claimed"
      | "HelioOracleChanged"
      | "HelioTokenChanged"
      | "PoolInited"
      | "RateChanged"
      | "RewardsLimitChanged"
      | "Uncage"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "drop",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "drop", data: BytesLike): Result;
}

export namespace CageEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HelioOracleChangedEvent {
  export type InputTuple = [newOracle: AddressLike];
  export type OutputTuple = [newOracle: string];
  export interface OutputObject {
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HelioTokenChangedEvent {
  export type InputTuple = [newToken: AddressLike];
  export type OutputTuple = [newToken: string];
  export interface OutputObject {
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolInitedEvent {
  export type InputTuple = [token: AddressLike, rate: BigNumberish];
  export type OutputTuple = [token: string, rate: bigint];
  export interface OutputObject {
    token: string;
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateChangedEvent {
  export type InputTuple = [token: AddressLike, newRate: BigNumberish];
  export type OutputTuple = [token: string, newRate: bigint];
  export interface OutputObject {
    token: string;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsLimitChangedEvent {
  export type InputTuple = [newLimit: BigNumberish];
  export type OutputTuple = [newLimit: bigint];
  export interface OutputObject {
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UncageEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRewards extends BaseContract {
  connect(runner?: ContractRunner | null): IRewards;
  waitForDeployment(): Promise<this>;

  interface: IRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  drop: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "drop"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Cage"
  ): TypedContractEvent<
    CageEvent.InputTuple,
    CageEvent.OutputTuple,
    CageEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "HelioOracleChanged"
  ): TypedContractEvent<
    HelioOracleChangedEvent.InputTuple,
    HelioOracleChangedEvent.OutputTuple,
    HelioOracleChangedEvent.OutputObject
  >;
  getEvent(
    key: "HelioTokenChanged"
  ): TypedContractEvent<
    HelioTokenChangedEvent.InputTuple,
    HelioTokenChangedEvent.OutputTuple,
    HelioTokenChangedEvent.OutputObject
  >;
  getEvent(
    key: "PoolInited"
  ): TypedContractEvent<
    PoolInitedEvent.InputTuple,
    PoolInitedEvent.OutputTuple,
    PoolInitedEvent.OutputObject
  >;
  getEvent(
    key: "RateChanged"
  ): TypedContractEvent<
    RateChangedEvent.InputTuple,
    RateChangedEvent.OutputTuple,
    RateChangedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsLimitChanged"
  ): TypedContractEvent<
    RewardsLimitChangedEvent.InputTuple,
    RewardsLimitChangedEvent.OutputTuple,
    RewardsLimitChangedEvent.OutputObject
  >;
  getEvent(
    key: "Uncage"
  ): TypedContractEvent<
    UncageEvent.InputTuple,
    UncageEvent.OutputTuple,
    UncageEvent.OutputObject
  >;

  filters: {
    "Cage(address)": TypedContractEvent<
      CageEvent.InputTuple,
      CageEvent.OutputTuple,
      CageEvent.OutputObject
    >;
    Cage: TypedContractEvent<
      CageEvent.InputTuple,
      CageEvent.OutputTuple,
      CageEvent.OutputObject
    >;

    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "HelioOracleChanged(address)": TypedContractEvent<
      HelioOracleChangedEvent.InputTuple,
      HelioOracleChangedEvent.OutputTuple,
      HelioOracleChangedEvent.OutputObject
    >;
    HelioOracleChanged: TypedContractEvent<
      HelioOracleChangedEvent.InputTuple,
      HelioOracleChangedEvent.OutputTuple,
      HelioOracleChangedEvent.OutputObject
    >;

    "HelioTokenChanged(address)": TypedContractEvent<
      HelioTokenChangedEvent.InputTuple,
      HelioTokenChangedEvent.OutputTuple,
      HelioTokenChangedEvent.OutputObject
    >;
    HelioTokenChanged: TypedContractEvent<
      HelioTokenChangedEvent.InputTuple,
      HelioTokenChangedEvent.OutputTuple,
      HelioTokenChangedEvent.OutputObject
    >;

    "PoolInited(address,uint256)": TypedContractEvent<
      PoolInitedEvent.InputTuple,
      PoolInitedEvent.OutputTuple,
      PoolInitedEvent.OutputObject
    >;
    PoolInited: TypedContractEvent<
      PoolInitedEvent.InputTuple,
      PoolInitedEvent.OutputTuple,
      PoolInitedEvent.OutputObject
    >;

    "RateChanged(address,uint256)": TypedContractEvent<
      RateChangedEvent.InputTuple,
      RateChangedEvent.OutputTuple,
      RateChangedEvent.OutputObject
    >;
    RateChanged: TypedContractEvent<
      RateChangedEvent.InputTuple,
      RateChangedEvent.OutputTuple,
      RateChangedEvent.OutputObject
    >;

    "RewardsLimitChanged(uint256)": TypedContractEvent<
      RewardsLimitChangedEvent.InputTuple,
      RewardsLimitChangedEvent.OutputTuple,
      RewardsLimitChangedEvent.OutputObject
    >;
    RewardsLimitChanged: TypedContractEvent<
      RewardsLimitChangedEvent.InputTuple,
      RewardsLimitChangedEvent.OutputTuple,
      RewardsLimitChangedEvent.OutputObject
    >;

    "Uncage(address)": TypedContractEvent<
      UncageEvent.InputTuple,
      UncageEvent.OutputTuple,
      UncageEvent.OutputObject
    >;
    Uncage: TypedContractEvent<
      UncageEvent.InputTuple,
      UncageEvent.OutputTuple,
      UncageEvent.OutputObject
    >;
  };
}
