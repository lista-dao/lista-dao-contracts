/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SnBnbYieldConverterStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assessDepositFee"
      | "balanceOf"
      | "balanceOfPool"
      | "balanceOfToken"
      | "balanceOfWant"
      | "batchWithdraw"
      | "bnbDepositBalance"
      | "bnbToDistribute"
      | "calculateYield"
      | "canDeposit"
      | "changeStakeManager"
      | "claimNextBatch"
      | "claimNextBatchAndDistribute"
      | "deposit"
      | "depositAll"
      | "depositPaused"
      | "destination"
      | "distributeFund"
      | "distributeManual"
      | "estimateInToken"
      | "harvest"
      | "initialize"
      | "lastUnstakeTriggerTime"
      | "manualWithdrawAmount"
      | "owner"
      | "panic"
      | "pause"
      | "renounceOwnership"
      | "rewards"
      | "setRewards"
      | "setStrategist"
      | "snBnbToUnstake"
      | "strategist"
      | "transferOwnership"
      | "unpause"
      | "vault"
      | "withdraw"
      | "withdrawInToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositPaused"
      | "DepositUnpaused"
      | "Harvested"
      | "Initialized"
      | "OwnershipTransferred"
      | "SnBnbStakeManagerChanged"
      | "UpdatedRewards"
      | "UpdatedStrategist"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assessDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfWant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bnbDepositBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bnbToDistribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStakeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNextBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimNextBatchAndDistribute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeManual",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateInToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUnstakeTriggerTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualWithdrawAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "panic", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "snBnbToUnstake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "assessDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bnbDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bnbToDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeStakeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNextBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNextBatchAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeManual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateInToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUnstakeTriggerTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "panic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snBnbToUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInToken",
    data: BytesLike
  ): Result;
}

export namespace DepositPausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositUnpausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestedEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SnBnbStakeManagerChangedEvent {
  export type InputTuple = [stakeManager: AddressLike];
  export type OutputTuple = [stakeManager: string];
  export interface OutputObject {
    stakeManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRewardsEvent {
  export type InputTuple = [rewards: AddressLike];
  export type OutputTuple = [rewards: string];
  export interface OutputObject {
    rewards: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedStrategistEvent {
  export type InputTuple = [strategist: AddressLike];
  export type OutputTuple = [strategist: string];
  export interface OutputObject {
    strategist: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SnBnbYieldConverterStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): SnBnbYieldConverterStrategy;
  waitForDeployment(): Promise<this>;

  interface: SnBnbYieldConverterStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assessDepositFee: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOf: TypedContractMethod<[], [bigint], "view">;

  balanceOfPool: TypedContractMethod<[], [bigint], "view">;

  balanceOfToken: TypedContractMethod<[], [bigint], "view">;

  balanceOfWant: TypedContractMethod<[], [bigint], "view">;

  batchWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  bnbDepositBalance: TypedContractMethod<[], [bigint], "view">;

  bnbToDistribute: TypedContractMethod<[], [bigint], "view">;

  calculateYield: TypedContractMethod<[], [bigint], "view">;

  canDeposit: TypedContractMethod<[amount: BigNumberish], [boolean], "view">;

  changeStakeManager: TypedContractMethod<
    [stakeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  claimNextBatch: TypedContractMethod<[], [boolean], "nonpayable">;

  claimNextBatchAndDistribute: TypedContractMethod<
    [maxNumRequests: BigNumberish],
    [[boolean, bigint] & { foundClaimableReq: boolean; reqCount: bigint }],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[], [bigint], "payable">;

  depositAll: TypedContractMethod<[], [void], "nonpayable">;

  depositPaused: TypedContractMethod<[], [boolean], "view">;

  destination: TypedContractMethod<[], [string], "view">;

  distributeFund: TypedContractMethod<
    [maxNumRequests: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  distributeManual: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  estimateInToken: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  harvest: TypedContractMethod<[], [void], "nonpayable">;

  initialize: TypedContractMethod<
    [
      destination: AddressLike,
      rewardsAddr: AddressLike,
      snBnbToken: AddressLike,
      masterVault: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  lastUnstakeTriggerTime: TypedContractMethod<[], [bigint], "view">;

  manualWithdrawAmount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  panic: TypedContractMethod<[], [bigint], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewards: TypedContractMethod<[], [string], "view">;

  setRewards: TypedContractMethod<
    [newRewardsAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  setStrategist: TypedContractMethod<
    [newStrategist: AddressLike],
    [void],
    "nonpayable"
  >;

  snBnbToUnstake: TypedContractMethod<[], [bigint], "view">;

  strategist: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  vault: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawInToken: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assessDepositFee"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfWant"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bnbDepositBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bnbToDistribute"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateYield"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canDeposit"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "changeStakeManager"
  ): TypedContractMethod<[stakeManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimNextBatch"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "claimNextBatchAndDistribute"
  ): TypedContractMethod<
    [maxNumRequests: BigNumberish],
    [[boolean, bigint] & { foundClaimableReq: boolean; reqCount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "depositAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "destination"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "distributeFund"
  ): TypedContractMethod<
    [maxNumRequests: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeManual"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "estimateInToken"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "harvest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      destination: AddressLike,
      rewardsAddr: AddressLike,
      snBnbToken: AddressLike,
      masterVault: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastUnstakeTriggerTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "manualWithdrawAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "panic"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setRewards"
  ): TypedContractMethod<[newRewardsAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStrategist"
  ): TypedContractMethod<[newStrategist: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "snBnbToUnstake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "strategist"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawInToken"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "DepositPaused"
  ): TypedContractEvent<
    DepositPausedEvent.InputTuple,
    DepositPausedEvent.OutputTuple,
    DepositPausedEvent.OutputObject
  >;
  getEvent(
    key: "DepositUnpaused"
  ): TypedContractEvent<
    DepositUnpausedEvent.InputTuple,
    DepositUnpausedEvent.OutputTuple,
    DepositUnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Harvested"
  ): TypedContractEvent<
    HarvestedEvent.InputTuple,
    HarvestedEvent.OutputTuple,
    HarvestedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SnBnbStakeManagerChanged"
  ): TypedContractEvent<
    SnBnbStakeManagerChangedEvent.InputTuple,
    SnBnbStakeManagerChangedEvent.OutputTuple,
    SnBnbStakeManagerChangedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRewards"
  ): TypedContractEvent<
    UpdatedRewardsEvent.InputTuple,
    UpdatedRewardsEvent.OutputTuple,
    UpdatedRewardsEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedStrategist"
  ): TypedContractEvent<
    UpdatedStrategistEvent.InputTuple,
    UpdatedStrategistEvent.OutputTuple,
    UpdatedStrategistEvent.OutputObject
  >;

  filters: {
    "DepositPaused()": TypedContractEvent<
      DepositPausedEvent.InputTuple,
      DepositPausedEvent.OutputTuple,
      DepositPausedEvent.OutputObject
    >;
    DepositPaused: TypedContractEvent<
      DepositPausedEvent.InputTuple,
      DepositPausedEvent.OutputTuple,
      DepositPausedEvent.OutputObject
    >;

    "DepositUnpaused()": TypedContractEvent<
      DepositUnpausedEvent.InputTuple,
      DepositUnpausedEvent.OutputTuple,
      DepositUnpausedEvent.OutputObject
    >;
    DepositUnpaused: TypedContractEvent<
      DepositUnpausedEvent.InputTuple,
      DepositUnpausedEvent.OutputTuple,
      DepositUnpausedEvent.OutputObject
    >;

    "Harvested(address,uint256)": TypedContractEvent<
      HarvestedEvent.InputTuple,
      HarvestedEvent.OutputTuple,
      HarvestedEvent.OutputObject
    >;
    Harvested: TypedContractEvent<
      HarvestedEvent.InputTuple,
      HarvestedEvent.OutputTuple,
      HarvestedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SnBnbStakeManagerChanged(address)": TypedContractEvent<
      SnBnbStakeManagerChangedEvent.InputTuple,
      SnBnbStakeManagerChangedEvent.OutputTuple,
      SnBnbStakeManagerChangedEvent.OutputObject
    >;
    SnBnbStakeManagerChanged: TypedContractEvent<
      SnBnbStakeManagerChangedEvent.InputTuple,
      SnBnbStakeManagerChangedEvent.OutputTuple,
      SnBnbStakeManagerChangedEvent.OutputObject
    >;

    "UpdatedRewards(address)": TypedContractEvent<
      UpdatedRewardsEvent.InputTuple,
      UpdatedRewardsEvent.OutputTuple,
      UpdatedRewardsEvent.OutputObject
    >;
    UpdatedRewards: TypedContractEvent<
      UpdatedRewardsEvent.InputTuple,
      UpdatedRewardsEvent.OutputTuple,
      UpdatedRewardsEvent.OutputObject
    >;

    "UpdatedStrategist(address)": TypedContractEvent<
      UpdatedStrategistEvent.InputTuple,
      UpdatedStrategistEvent.OutputTuple,
      UpdatedStrategistEvent.OutputObject
    >;
    UpdatedStrategist: TypedContractEvent<
      UpdatedStrategistEvent.InputTuple,
      UpdatedStrategistEvent.OutputTuple,
      UpdatedStrategistEvent.OutputObject
    >;
  };
}
