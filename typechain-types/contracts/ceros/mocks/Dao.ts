/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DaoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "deposits"
      | "dropRewards"
      | "withdraw"
      | "withdraws"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionFinished"
      | "AuctionStarted"
      | "Borrow"
      | "CollateralDisabled"
      | "CollateralEnabled"
      | "Deposit"
      | "Payback"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dropRewards",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraws",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dropRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraws", data: BytesLike): Result;
}

export namespace AuctionFinishedEvent {
  export type InputTuple = [
    token: AddressLike,
    keeper: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, keeper: string, amount: bigint];
  export interface OutputObject {
    token: string;
    keeper: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionStartedEvent {
  export type InputTuple = [
    token: AddressLike,
    user: AddressLike,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    user: string,
    amount: bigint,
    price: bigint
  ];
  export interface OutputObject {
    token: string;
    user: string;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    user: AddressLike,
    collateral: AddressLike,
    collateralAmount: BigNumberish,
    amount: BigNumberish,
    liquidationPrice: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateral: string,
    collateralAmount: bigint,
    amount: bigint,
    liquidationPrice: bigint
  ];
  export interface OutputObject {
    user: string;
    collateral: string;
    collateralAmount: bigint;
    amount: bigint;
    liquidationPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDisabledEvent {
  export type InputTuple = [token: AddressLike, ilk: BytesLike];
  export type OutputTuple = [token: string, ilk: string];
  export interface OutputObject {
    token: string;
    ilk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralEnabledEvent {
  export type InputTuple = [token: AddressLike, ilk: BytesLike];
  export type OutputTuple = [token: string, ilk: string];
  export interface OutputObject {
    token: string;
    ilk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    collateral: AddressLike,
    amount: BigNumberish,
    totalAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateral: string,
    amount: bigint,
    totalAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    collateral: string;
    amount: bigint;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaybackEvent {
  export type InputTuple = [
    user: AddressLike,
    collateral: AddressLike,
    amount: BigNumberish,
    debt: BigNumberish,
    liquidationPrice: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateral: string,
    amount: bigint,
    debt: bigint,
    liquidationPrice: bigint
  ];
  export interface OutputObject {
    user: string;
    collateral: string;
    amount: bigint;
    debt: bigint;
    liquidationPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Dao extends BaseContract {
  connect(runner?: ContractRunner | null): Dao;
  waitForDeployment(): Promise<this>;

  interface: DaoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [participant: AddressLike, token: AddressLike, dink: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  deposits: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  dropRewards: TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [participant: AddressLike, token: AddressLike, dink: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdraws: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [participant: AddressLike, token: AddressLike, dink: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "dropRewards"
  ): TypedContractMethod<
    [token: AddressLike, usr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [participant: AddressLike, token: AddressLike, dink: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraws"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AuctionFinished"
  ): TypedContractEvent<
    AuctionFinishedEvent.InputTuple,
    AuctionFinishedEvent.OutputTuple,
    AuctionFinishedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionStarted"
  ): TypedContractEvent<
    AuctionStartedEvent.InputTuple,
    AuctionStartedEvent.OutputTuple,
    AuctionStartedEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDisabled"
  ): TypedContractEvent<
    CollateralDisabledEvent.InputTuple,
    CollateralDisabledEvent.OutputTuple,
    CollateralDisabledEvent.OutputObject
  >;
  getEvent(
    key: "CollateralEnabled"
  ): TypedContractEvent<
    CollateralEnabledEvent.InputTuple,
    CollateralEnabledEvent.OutputTuple,
    CollateralEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Payback"
  ): TypedContractEvent<
    PaybackEvent.InputTuple,
    PaybackEvent.OutputTuple,
    PaybackEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AuctionFinished(address,address,uint256)": TypedContractEvent<
      AuctionFinishedEvent.InputTuple,
      AuctionFinishedEvent.OutputTuple,
      AuctionFinishedEvent.OutputObject
    >;
    AuctionFinished: TypedContractEvent<
      AuctionFinishedEvent.InputTuple,
      AuctionFinishedEvent.OutputTuple,
      AuctionFinishedEvent.OutputObject
    >;

    "AuctionStarted(address,address,uint256,uint256)": TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;
    AuctionStarted: TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;

    "Borrow(address,address,uint256,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "CollateralDisabled(address,bytes32)": TypedContractEvent<
      CollateralDisabledEvent.InputTuple,
      CollateralDisabledEvent.OutputTuple,
      CollateralDisabledEvent.OutputObject
    >;
    CollateralDisabled: TypedContractEvent<
      CollateralDisabledEvent.InputTuple,
      CollateralDisabledEvent.OutputTuple,
      CollateralDisabledEvent.OutputObject
    >;

    "CollateralEnabled(address,bytes32)": TypedContractEvent<
      CollateralEnabledEvent.InputTuple,
      CollateralEnabledEvent.OutputTuple,
      CollateralEnabledEvent.OutputObject
    >;
    CollateralEnabled: TypedContractEvent<
      CollateralEnabledEvent.InputTuple,
      CollateralEnabledEvent.OutputTuple,
      CollateralEnabledEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Payback(address,address,uint256,uint256,uint256)": TypedContractEvent<
      PaybackEvent.InputTuple,
      PaybackEvent.OutputTuple,
      PaybackEvent.OutputObject
    >;
    Payback: TypedContractEvent<
      PaybackEvent.InputTuple,
      PaybackEvent.OutputTuple,
      PaybackEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
