/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IETHVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimYieldsFor"
      | "depositFor"
      | "getCeTokenBalanceOf"
      | "getPrincipalOf"
      | "getTotalBETHAmountInVault"
      | "getTotalETHAmountInVault"
      | "getYieldFor"
      | "withdrawBETHFor"
      | "withdrawETHFor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "Deposited"
      | "RatioUpdated"
      | "Rebalanced"
      | "RouterChanged"
      | "SetStrategist"
      | "WithdrawalFeeChanged"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimYieldsFor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCeTokenBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrincipalOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBETHAmountInVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalETHAmountInVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBETHFor",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETHFor",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimYieldsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCeTokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrincipalOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBETHAmountInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalETHAmountInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBETHFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETHFor",
    data: BytesLike
  ): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, recipient: string, value: bigint];
  export interface OutputObject {
    owner: string;
    recipient: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, recipient: string, value: bigint];
  export interface OutputObject {
    owner: string;
    recipient: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatioUpdatedEvent {
  export type InputTuple = [currentRatio: BigNumberish];
  export type OutputTuple = [currentRatio: bigint];
  export interface OutputObject {
    currentRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalancedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouterChangedEvent {
  export type InputTuple = [router: AddressLike];
  export type OutputTuple = [router: string];
  export interface OutputObject {
    router: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetStrategistEvent {
  export type InputTuple = [strategist: AddressLike];
  export type OutputTuple = [strategist: string];
  export interface OutputObject {
    strategist: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalFeeChangedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, recipient: string, value: bigint];
  export interface OutputObject {
    owner: string;
    recipient: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IETHVault extends BaseContract {
  connect(runner?: ContractRunner | null): IETHVault;
  waitForDeployment(): Promise<this>;

  interface: IETHVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimYieldsFor: TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  depositFor: TypedContractMethod<
    [
      recipient: AddressLike,
      certTokenAmount: BigNumberish,
      BETHAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getCeTokenBalanceOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getPrincipalOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getTotalBETHAmountInVault: TypedContractMethod<[], [bigint], "view">;

  getTotalETHAmountInVault: TypedContractMethod<[], [bigint], "view">;

  getYieldFor: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  withdrawBETHFor: TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawETHFor: TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimYieldsFor"
  ): TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFor"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      certTokenAmount: BigNumberish,
      BETHAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCeTokenBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrincipalOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBETHAmountInVault"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalETHAmountInVault"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getYieldFor"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawBETHFor"
  ): TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawETHFor"
  ): TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "RatioUpdated"
  ): TypedContractEvent<
    RatioUpdatedEvent.InputTuple,
    RatioUpdatedEvent.OutputTuple,
    RatioUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Rebalanced"
  ): TypedContractEvent<
    RebalancedEvent.InputTuple,
    RebalancedEvent.OutputTuple,
    RebalancedEvent.OutputObject
  >;
  getEvent(
    key: "RouterChanged"
  ): TypedContractEvent<
    RouterChangedEvent.InputTuple,
    RouterChangedEvent.OutputTuple,
    RouterChangedEvent.OutputObject
  >;
  getEvent(
    key: "SetStrategist"
  ): TypedContractEvent<
    SetStrategistEvent.InputTuple,
    SetStrategistEvent.OutputTuple,
    SetStrategistEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalFeeChanged"
  ): TypedContractEvent<
    WithdrawalFeeChangedEvent.InputTuple,
    WithdrawalFeeChangedEvent.OutputTuple,
    WithdrawalFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Claimed(address,address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Deposited(address,address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "RatioUpdated(uint256)": TypedContractEvent<
      RatioUpdatedEvent.InputTuple,
      RatioUpdatedEvent.OutputTuple,
      RatioUpdatedEvent.OutputObject
    >;
    RatioUpdated: TypedContractEvent<
      RatioUpdatedEvent.InputTuple,
      RatioUpdatedEvent.OutputTuple,
      RatioUpdatedEvent.OutputObject
    >;

    "Rebalanced(uint256)": TypedContractEvent<
      RebalancedEvent.InputTuple,
      RebalancedEvent.OutputTuple,
      RebalancedEvent.OutputObject
    >;
    Rebalanced: TypedContractEvent<
      RebalancedEvent.InputTuple,
      RebalancedEvent.OutputTuple,
      RebalancedEvent.OutputObject
    >;

    "RouterChanged(address)": TypedContractEvent<
      RouterChangedEvent.InputTuple,
      RouterChangedEvent.OutputTuple,
      RouterChangedEvent.OutputObject
    >;
    RouterChanged: TypedContractEvent<
      RouterChangedEvent.InputTuple,
      RouterChangedEvent.OutputTuple,
      RouterChangedEvent.OutputObject
    >;

    "SetStrategist(address)": TypedContractEvent<
      SetStrategistEvent.InputTuple,
      SetStrategistEvent.OutputTuple,
      SetStrategistEvent.OutputObject
    >;
    SetStrategist: TypedContractEvent<
      SetStrategistEvent.InputTuple,
      SetStrategistEvent.OutputTuple,
      SetStrategistEvent.OutputObject
    >;

    "WithdrawalFeeChanged(uint256)": TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;
    WithdrawalFeeChanged: TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;

    "Withdrawn(address,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
