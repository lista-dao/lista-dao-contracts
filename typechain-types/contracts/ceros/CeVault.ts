/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CeVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeRouter"
      | "claimYields"
      | "claimYieldsFor"
      | "deposit"
      | "depositFor"
      | "getAbnbcAddress"
      | "getCeToken"
      | "getCeTokenBalanceOf"
      | "getClaimedOf"
      | "getDepositOf"
      | "getName"
      | "getPrincipalOf"
      | "getRouter"
      | "getTotalAmountInVault"
      | "getYieldFor"
      | "initialize"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdraw"
      | "withdrawFor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CeTokenChanged"
      | "Claimed"
      | "Deposited"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "RatioUpdated"
      | "RouterChanged"
      | "Unpaused"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYields",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYieldsFor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAbnbcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCeTokenBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPrincipalOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalAmountInVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFor",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimYields",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimYieldsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAbnbcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCeTokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrincipalOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmountInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFor",
    data: BytesLike
  ): Result;
}

export namespace CeTokenChangedEvent {
  export type InputTuple = [oldToken: AddressLike, newToken: AddressLike];
  export type OutputTuple = [oldToken: string, newToken: string];
  export interface OutputObject {
    oldToken: string;
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, recipient: string, value: bigint];
  export interface OutputObject {
    owner: string;
    recipient: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, recipient: string, value: bigint];
  export interface OutputObject {
    owner: string;
    recipient: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatioUpdatedEvent {
  export type InputTuple = [currentRatio: BigNumberish];
  export type OutputTuple = [currentRatio: bigint];
  export interface OutputObject {
    currentRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouterChangedEvent {
  export type InputTuple = [router: AddressLike];
  export type OutputTuple = [router: string];
  export interface OutputObject {
    router: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, recipient: string, value: bigint];
  export interface OutputObject {
    owner: string;
    recipient: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CeVault extends BaseContract {
  connect(runner?: ContractRunner | null): CeVault;
  waitForDeployment(): Promise<this>;

  interface: CeVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeRouter: TypedContractMethod<
    [router: AddressLike],
    [void],
    "nonpayable"
  >;

  claimYields: TypedContractMethod<
    [recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimYieldsFor: TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;

  depositFor: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getAbnbcAddress: TypedContractMethod<[], [string], "view">;

  getCeToken: TypedContractMethod<[], [string], "view">;

  getCeTokenBalanceOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getClaimedOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getDepositOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getName: TypedContractMethod<[], [string], "view">;

  getPrincipalOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getRouter: TypedContractMethod<[], [string], "view">;

  getTotalAmountInVault: TypedContractMethod<[], [bigint], "view">;

  getYieldFor: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [name: string, ceTokenAddress: AddressLike, aBNBcAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawFor: TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeRouter"
  ): TypedContractMethod<[router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimYields"
  ): TypedContractMethod<[recipient: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claimYieldsFor"
  ): TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "depositFor"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAbnbcAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCeTokenBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getClaimedOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPrincipalOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalAmountInVault"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getYieldFor"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [name: string, ceTokenAddress: AddressLike, aBNBcAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFor"
  ): TypedContractMethod<
    [owner: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "CeTokenChanged"
  ): TypedContractEvent<
    CeTokenChangedEvent.InputTuple,
    CeTokenChangedEvent.OutputTuple,
    CeTokenChangedEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RatioUpdated"
  ): TypedContractEvent<
    RatioUpdatedEvent.InputTuple,
    RatioUpdatedEvent.OutputTuple,
    RatioUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RouterChanged"
  ): TypedContractEvent<
    RouterChangedEvent.InputTuple,
    RouterChangedEvent.OutputTuple,
    RouterChangedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "CeTokenChanged(address,address)": TypedContractEvent<
      CeTokenChangedEvent.InputTuple,
      CeTokenChangedEvent.OutputTuple,
      CeTokenChangedEvent.OutputObject
    >;
    CeTokenChanged: TypedContractEvent<
      CeTokenChangedEvent.InputTuple,
      CeTokenChangedEvent.OutputTuple,
      CeTokenChangedEvent.OutputObject
    >;

    "Claimed(address,address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Deposited(address,address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RatioUpdated(uint256)": TypedContractEvent<
      RatioUpdatedEvent.InputTuple,
      RatioUpdatedEvent.OutputTuple,
      RatioUpdatedEvent.OutputObject
    >;
    RatioUpdated: TypedContractEvent<
      RatioUpdatedEvent.InputTuple,
      RatioUpdatedEvent.OutputTuple,
      RatioUpdatedEvent.OutputObject
    >;

    "RouterChanged(address)": TypedContractEvent<
      RouterChangedEvent.InputTuple,
      RouterChangedEvent.OutputTuple,
      RouterChangedEvent.OutputObject
    >;
    RouterChanged: TypedContractEvent<
      RouterChangedEvent.InputTuple,
      RouterChangedEvent.OutputTuple,
      RouterChangedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawn(address,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
