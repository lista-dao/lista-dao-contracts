/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface HelioETHProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_ceETHRouter"
      | "_ceToken"
      | "_certToken"
      | "_collateralToken"
      | "_dao"
      | "_operator"
      | "_proxy"
      | "changeCeToken"
      | "changeCertToken"
      | "changeCollateralToken"
      | "changeDao"
      | "changeMinWithdrwalAmount"
      | "changeOperator"
      | "changeProxy"
      | "claim"
      | "daoBurn"
      | "daoMint"
      | "initialize"
      | "liquidation"
      | "owner"
      | "pause"
      | "paused"
      | "provideInETH"
      | "releaseInBETH"
      | "releaseInETH"
      | "renounceOwnership"
      | "transferOwnership"
      | "unPause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeCeToken"
      | "ChangeCertToken"
      | "ChangeCollateralToken"
      | "ChangeDao"
      | "ChangeOperator"
      | "ChangeProxy"
      | "ChangeWithdrwalAmount"
      | "Claim"
      | "Deposit"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_ceETHRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_ceToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_certToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_dao", values?: undefined): string;
  encodeFunctionData(functionFragment: "_operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "_proxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeCeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCertToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCollateralToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDao",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinWithdrwalAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProxy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "daoBurn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "daoMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideInETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseInBETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseInETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unPause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_ceETHRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ceToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_certToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_proxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeCeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCertToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMinWithdrwalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideInETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseInBETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseInETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
}

export namespace ChangeCeTokenEvent {
  export type InputTuple = [ceToken: AddressLike];
  export type OutputTuple = [ceToken: string];
  export interface OutputObject {
    ceToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCertTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCollateralTokenEvent {
  export type InputTuple = [collateralToken: AddressLike];
  export type OutputTuple = [collateralToken: string];
  export interface OutputObject {
    collateralToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeDaoEvent {
  export type InputTuple = [dao: AddressLike];
  export type OutputTuple = [dao: string];
  export interface OutputObject {
    dao: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeOperatorEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeProxyEvent {
  export type InputTuple = [auctionProxy: AddressLike];
  export type OutputTuple = [auctionProxy: string];
  export interface OutputObject {
    auctionProxy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeWithdrwalAmountEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [owner: string, recipient: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HelioETHProvider extends BaseContract {
  connect(runner?: ContractRunner | null): HelioETHProvider;
  waitForDeployment(): Promise<this>;

  interface: HelioETHProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _ceETHRouter: TypedContractMethod<[], [string], "view">;

  _ceToken: TypedContractMethod<[], [string], "view">;

  _certToken: TypedContractMethod<[], [string], "view">;

  _collateralToken: TypedContractMethod<[], [string], "view">;

  _dao: TypedContractMethod<[], [string], "view">;

  _operator: TypedContractMethod<[], [string], "view">;

  _proxy: TypedContractMethod<[], [string], "view">;

  changeCeToken: TypedContractMethod<
    [ceToken: AddressLike],
    [void],
    "nonpayable"
  >;

  changeCertToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  changeCollateralToken: TypedContractMethod<
    [collateralToken: AddressLike],
    [void],
    "nonpayable"
  >;

  changeDao: TypedContractMethod<[dao: AddressLike], [void], "nonpayable">;

  changeMinWithdrwalAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  changeProxy: TypedContractMethod<
    [auctionProxy: AddressLike],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[recipient: AddressLike], [bigint], "nonpayable">;

  daoBurn: TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  daoMint: TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      collateralToken: AddressLike,
      certToken: AddressLike,
      ceToken: AddressLike,
      ceRouter: AddressLike,
      daoAddress: AddressLike,
      minAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  liquidation: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  provideInETH: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  releaseInBETH: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  releaseInETH: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unPause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_ceETHRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_ceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_certToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_collateralToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_dao"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_operator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_proxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeCeToken"
  ): TypedContractMethod<[ceToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeCertToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeCollateralToken"
  ): TypedContractMethod<[collateralToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeDao"
  ): TypedContractMethod<[dao: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMinWithdrwalAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeProxy"
  ): TypedContractMethod<[auctionProxy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[recipient: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "daoBurn"
  ): TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "daoMint"
  ): TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      collateralToken: AddressLike,
      certToken: AddressLike,
      ceToken: AddressLike,
      ceRouter: AddressLike,
      daoAddress: AddressLike,
      minAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidation"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "provideInETH"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseInBETH"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releaseInETH"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unPause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ChangeCeToken"
  ): TypedContractEvent<
    ChangeCeTokenEvent.InputTuple,
    ChangeCeTokenEvent.OutputTuple,
    ChangeCeTokenEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCertToken"
  ): TypedContractEvent<
    ChangeCertTokenEvent.InputTuple,
    ChangeCertTokenEvent.OutputTuple,
    ChangeCertTokenEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCollateralToken"
  ): TypedContractEvent<
    ChangeCollateralTokenEvent.InputTuple,
    ChangeCollateralTokenEvent.OutputTuple,
    ChangeCollateralTokenEvent.OutputObject
  >;
  getEvent(
    key: "ChangeDao"
  ): TypedContractEvent<
    ChangeDaoEvent.InputTuple,
    ChangeDaoEvent.OutputTuple,
    ChangeDaoEvent.OutputObject
  >;
  getEvent(
    key: "ChangeOperator"
  ): TypedContractEvent<
    ChangeOperatorEvent.InputTuple,
    ChangeOperatorEvent.OutputTuple,
    ChangeOperatorEvent.OutputObject
  >;
  getEvent(
    key: "ChangeProxy"
  ): TypedContractEvent<
    ChangeProxyEvent.InputTuple,
    ChangeProxyEvent.OutputTuple,
    ChangeProxyEvent.OutputObject
  >;
  getEvent(
    key: "ChangeWithdrwalAmount"
  ): TypedContractEvent<
    ChangeWithdrwalAmountEvent.InputTuple,
    ChangeWithdrwalAmountEvent.OutputTuple,
    ChangeWithdrwalAmountEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "ChangeCeToken(address)": TypedContractEvent<
      ChangeCeTokenEvent.InputTuple,
      ChangeCeTokenEvent.OutputTuple,
      ChangeCeTokenEvent.OutputObject
    >;
    ChangeCeToken: TypedContractEvent<
      ChangeCeTokenEvent.InputTuple,
      ChangeCeTokenEvent.OutputTuple,
      ChangeCeTokenEvent.OutputObject
    >;

    "ChangeCertToken(address)": TypedContractEvent<
      ChangeCertTokenEvent.InputTuple,
      ChangeCertTokenEvent.OutputTuple,
      ChangeCertTokenEvent.OutputObject
    >;
    ChangeCertToken: TypedContractEvent<
      ChangeCertTokenEvent.InputTuple,
      ChangeCertTokenEvent.OutputTuple,
      ChangeCertTokenEvent.OutputObject
    >;

    "ChangeCollateralToken(address)": TypedContractEvent<
      ChangeCollateralTokenEvent.InputTuple,
      ChangeCollateralTokenEvent.OutputTuple,
      ChangeCollateralTokenEvent.OutputObject
    >;
    ChangeCollateralToken: TypedContractEvent<
      ChangeCollateralTokenEvent.InputTuple,
      ChangeCollateralTokenEvent.OutputTuple,
      ChangeCollateralTokenEvent.OutputObject
    >;

    "ChangeDao(address)": TypedContractEvent<
      ChangeDaoEvent.InputTuple,
      ChangeDaoEvent.OutputTuple,
      ChangeDaoEvent.OutputObject
    >;
    ChangeDao: TypedContractEvent<
      ChangeDaoEvent.InputTuple,
      ChangeDaoEvent.OutputTuple,
      ChangeDaoEvent.OutputObject
    >;

    "ChangeOperator(address)": TypedContractEvent<
      ChangeOperatorEvent.InputTuple,
      ChangeOperatorEvent.OutputTuple,
      ChangeOperatorEvent.OutputObject
    >;
    ChangeOperator: TypedContractEvent<
      ChangeOperatorEvent.InputTuple,
      ChangeOperatorEvent.OutputTuple,
      ChangeOperatorEvent.OutputObject
    >;

    "ChangeProxy(address)": TypedContractEvent<
      ChangeProxyEvent.InputTuple,
      ChangeProxyEvent.OutputTuple,
      ChangeProxyEvent.OutputObject
    >;
    ChangeProxy: TypedContractEvent<
      ChangeProxyEvent.InputTuple,
      ChangeProxyEvent.OutputTuple,
      ChangeProxyEvent.OutputObject
    >;

    "ChangeWithdrwalAmount(uint256)": TypedContractEvent<
      ChangeWithdrwalAmountEvent.InputTuple,
      ChangeWithdrwalAmountEvent.OutputTuple,
      ChangeWithdrwalAmountEvent.OutputObject
    >;
    ChangeWithdrwalAmount: TypedContractEvent<
      ChangeWithdrwalAmountEvent.InputTuple,
      ChangeWithdrwalAmountEvent.OutputTuple,
      ChangeWithdrwalAmountEvent.OutputObject
    >;

    "Claim(address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawal(address,address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
