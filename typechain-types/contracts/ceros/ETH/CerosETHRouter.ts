/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface CerosETHRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeCertTokenRatio"
      | "changeMinStakeAmount"
      | "changeProvider"
      | "changeVault"
      | "claim"
      | "deposit"
      | "getCeToken"
      | "getCertToken"
      | "getCertTokenRatio"
      | "getMinStake"
      | "getProvider"
      | "getReferral"
      | "getVaultAddress"
      | "initialize"
      | "liquidation"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdrawBETH"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeCeToken"
      | "ChangeCeTokenJoin"
      | "ChangeCertToken"
      | "ChangeCertTokenRatio"
      | "ChangeCollateralToken"
      | "ChangeDao"
      | "ChangeMinStakeAmount"
      | "ChangeProvider"
      | "ChangeVault"
      | "Claim"
      | "Deposit"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeCertTokenRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinStakeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCertToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCertTokenRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeCertTokenRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCertToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertTokenRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace ChangeCeTokenEvent {
  export type InputTuple = [ceToken: AddressLike];
  export type OutputTuple = [ceToken: string];
  export interface OutputObject {
    ceToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCeTokenJoinEvent {
  export type InputTuple = [ceTokenJoin: AddressLike];
  export type OutputTuple = [ceTokenJoin: string];
  export interface OutputObject {
    ceTokenJoin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCertTokenEvent {
  export type InputTuple = [certToken: AddressLike];
  export type OutputTuple = [certToken: string];
  export interface OutputObject {
    certToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCertTokenRatioEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCollateralTokenEvent {
  export type InputTuple = [collateralToken: AddressLike];
  export type OutputTuple = [collateralToken: string];
  export interface OutputObject {
    collateralToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeDaoEvent {
  export type InputTuple = [dao: AddressLike];
  export type OutputTuple = [dao: string];
  export interface OutputObject {
    dao: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeMinStakeAmountEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeProviderEvent {
  export type InputTuple = [provider: AddressLike];
  export type OutputTuple = [provider: string];
  export interface OutputObject {
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeVaultEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    recipient: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [recipient: string, token: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    account: AddressLike,
    certAmount: BigNumberish,
    BETHAmount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    certAmount: bigint,
    BETHAmount: bigint
  ];
  export interface OutputObject {
    account: string;
    certAmount: bigint;
    BETHAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    recipient: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    owner: string;
    recipient: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CerosETHRouter extends BaseContract {
  connect(runner?: ContractRunner | null): CerosETHRouter;
  waitForDeployment(): Promise<this>;

  interface: CerosETHRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeCertTokenRatio: TypedContractMethod<
    [ratio: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeMinStakeAmount: TypedContractMethod<
    [minStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeProvider: TypedContractMethod<
    [provider: AddressLike],
    [void],
    "nonpayable"
  >;

  changeVault: TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;

  claim: TypedContractMethod<[recipient: AddressLike], [bigint], "nonpayable">;

  deposit: TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;

  getCeToken: TypedContractMethod<[], [string], "view">;

  getCertToken: TypedContractMethod<[], [string], "view">;

  getCertTokenRatio: TypedContractMethod<[], [bigint], "view">;

  getMinStake: TypedContractMethod<[], [bigint], "view">;

  getProvider: TypedContractMethod<[], [string], "view">;

  getReferral: TypedContractMethod<[], [string], "view">;

  getVaultAddress: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      certToken: AddressLike,
      ceToken: AddressLike,
      BETH: AddressLike,
      vault: AddressLike,
      minStake: BigNumberish,
      referral: AddressLike,
      certTokenRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  liquidation: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawBETH: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeCertTokenRatio"
  ): TypedContractMethod<[ratio: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMinStakeAmount"
  ): TypedContractMethod<[minStake: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeProvider"
  ): TypedContractMethod<[provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeVault"
  ): TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[recipient: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getCeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCertToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCertTokenRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getReferral"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVaultAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      certToken: AddressLike,
      ceToken: AddressLike,
      BETH: AddressLike,
      vault: AddressLike,
      minStake: BigNumberish,
      referral: AddressLike,
      certTokenRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidation"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBETH"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "ChangeCeToken"
  ): TypedContractEvent<
    ChangeCeTokenEvent.InputTuple,
    ChangeCeTokenEvent.OutputTuple,
    ChangeCeTokenEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCeTokenJoin"
  ): TypedContractEvent<
    ChangeCeTokenJoinEvent.InputTuple,
    ChangeCeTokenJoinEvent.OutputTuple,
    ChangeCeTokenJoinEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCertToken"
  ): TypedContractEvent<
    ChangeCertTokenEvent.InputTuple,
    ChangeCertTokenEvent.OutputTuple,
    ChangeCertTokenEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCertTokenRatio"
  ): TypedContractEvent<
    ChangeCertTokenRatioEvent.InputTuple,
    ChangeCertTokenRatioEvent.OutputTuple,
    ChangeCertTokenRatioEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCollateralToken"
  ): TypedContractEvent<
    ChangeCollateralTokenEvent.InputTuple,
    ChangeCollateralTokenEvent.OutputTuple,
    ChangeCollateralTokenEvent.OutputObject
  >;
  getEvent(
    key: "ChangeDao"
  ): TypedContractEvent<
    ChangeDaoEvent.InputTuple,
    ChangeDaoEvent.OutputTuple,
    ChangeDaoEvent.OutputObject
  >;
  getEvent(
    key: "ChangeMinStakeAmount"
  ): TypedContractEvent<
    ChangeMinStakeAmountEvent.InputTuple,
    ChangeMinStakeAmountEvent.OutputTuple,
    ChangeMinStakeAmountEvent.OutputObject
  >;
  getEvent(
    key: "ChangeProvider"
  ): TypedContractEvent<
    ChangeProviderEvent.InputTuple,
    ChangeProviderEvent.OutputTuple,
    ChangeProviderEvent.OutputObject
  >;
  getEvent(
    key: "ChangeVault"
  ): TypedContractEvent<
    ChangeVaultEvent.InputTuple,
    ChangeVaultEvent.OutputTuple,
    ChangeVaultEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "ChangeCeToken(address)": TypedContractEvent<
      ChangeCeTokenEvent.InputTuple,
      ChangeCeTokenEvent.OutputTuple,
      ChangeCeTokenEvent.OutputObject
    >;
    ChangeCeToken: TypedContractEvent<
      ChangeCeTokenEvent.InputTuple,
      ChangeCeTokenEvent.OutputTuple,
      ChangeCeTokenEvent.OutputObject
    >;

    "ChangeCeTokenJoin(address)": TypedContractEvent<
      ChangeCeTokenJoinEvent.InputTuple,
      ChangeCeTokenJoinEvent.OutputTuple,
      ChangeCeTokenJoinEvent.OutputObject
    >;
    ChangeCeTokenJoin: TypedContractEvent<
      ChangeCeTokenJoinEvent.InputTuple,
      ChangeCeTokenJoinEvent.OutputTuple,
      ChangeCeTokenJoinEvent.OutputObject
    >;

    "ChangeCertToken(address)": TypedContractEvent<
      ChangeCertTokenEvent.InputTuple,
      ChangeCertTokenEvent.OutputTuple,
      ChangeCertTokenEvent.OutputObject
    >;
    ChangeCertToken: TypedContractEvent<
      ChangeCertTokenEvent.InputTuple,
      ChangeCertTokenEvent.OutputTuple,
      ChangeCertTokenEvent.OutputObject
    >;

    "ChangeCertTokenRatio(uint256)": TypedContractEvent<
      ChangeCertTokenRatioEvent.InputTuple,
      ChangeCertTokenRatioEvent.OutputTuple,
      ChangeCertTokenRatioEvent.OutputObject
    >;
    ChangeCertTokenRatio: TypedContractEvent<
      ChangeCertTokenRatioEvent.InputTuple,
      ChangeCertTokenRatioEvent.OutputTuple,
      ChangeCertTokenRatioEvent.OutputObject
    >;

    "ChangeCollateralToken(address)": TypedContractEvent<
      ChangeCollateralTokenEvent.InputTuple,
      ChangeCollateralTokenEvent.OutputTuple,
      ChangeCollateralTokenEvent.OutputObject
    >;
    ChangeCollateralToken: TypedContractEvent<
      ChangeCollateralTokenEvent.InputTuple,
      ChangeCollateralTokenEvent.OutputTuple,
      ChangeCollateralTokenEvent.OutputObject
    >;

    "ChangeDao(address)": TypedContractEvent<
      ChangeDaoEvent.InputTuple,
      ChangeDaoEvent.OutputTuple,
      ChangeDaoEvent.OutputObject
    >;
    ChangeDao: TypedContractEvent<
      ChangeDaoEvent.InputTuple,
      ChangeDaoEvent.OutputTuple,
      ChangeDaoEvent.OutputObject
    >;

    "ChangeMinStakeAmount(uint256)": TypedContractEvent<
      ChangeMinStakeAmountEvent.InputTuple,
      ChangeMinStakeAmountEvent.OutputTuple,
      ChangeMinStakeAmountEvent.OutputObject
    >;
    ChangeMinStakeAmount: TypedContractEvent<
      ChangeMinStakeAmountEvent.InputTuple,
      ChangeMinStakeAmountEvent.OutputTuple,
      ChangeMinStakeAmountEvent.OutputObject
    >;

    "ChangeProvider(address)": TypedContractEvent<
      ChangeProviderEvent.InputTuple,
      ChangeProviderEvent.OutputTuple,
      ChangeProviderEvent.OutputObject
    >;
    ChangeProvider: TypedContractEvent<
      ChangeProviderEvent.InputTuple,
      ChangeProviderEvent.OutputTuple,
      ChangeProviderEvent.OutputObject
    >;

    "ChangeVault(address)": TypedContractEvent<
      ChangeVaultEvent.InputTuple,
      ChangeVaultEvent.OutputTuple,
      ChangeVaultEvent.OutputObject
    >;
    ChangeVault: TypedContractEvent<
      ChangeVaultEvent.InputTuple,
      ChangeVaultEvent.OutputTuple,
      ChangeVaultEvent.OutputObject
    >;

    "Claim(address,address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawal(address,address,address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
