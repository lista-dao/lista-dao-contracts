/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SaleStruct = {
  pos: BigNumberish;
  tab: BigNumberish;
  lot: BigNumberish;
  usr: AddressLike;
  tic: BigNumberish;
  top: BigNumberish;
};

export type SaleStructOutput = [
  pos: bigint,
  tab: bigint,
  lot: bigint,
  usr: string,
  tic: bigint,
  top: bigint
] & {
  pos: bigint;
  tab: bigint;
  lot: bigint;
  usr: string;
  tic: bigint;
  top: bigint;
};

export interface AuctionProxyInterface extends Interface {
  getFunction(nameOrSignature: "getAllActiveAuctionsForClip"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllActiveAuctionsForClip",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllActiveAuctionsForClip",
    data: BytesLike
  ): Result;
}

export interface AuctionProxy extends BaseContract {
  connect(runner?: ContractRunner | null): AuctionProxy;
  waitForDeployment(): Promise<this>;

  interface: AuctionProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllActiveAuctionsForClip: TypedContractMethod<
    [clip_: AddressLike],
    [SaleStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllActiveAuctionsForClip"
  ): TypedContractMethod<[clip_: AddressLike], [SaleStructOutput[]], "view">;

  filters: {};
}
