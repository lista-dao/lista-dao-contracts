/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MasterVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_STRATEGIES"
      | "addManager"
      | "allocate"
      | "asset"
      | "availableToWithdraw"
      | "balanceOfTokenFromStrategy"
      | "changeFeeReceiver"
      | "changeProvider"
      | "changeStrategyAllocation"
      | "depositAllToStrategy"
      | "depositETH"
      | "depositFee"
      | "depositToStrategy"
      | "estimateInTokenFromStrategy"
      | "feeEarned"
      | "feeReceiver"
      | "initialize"
      | "manager"
      | "maxDepositFee"
      | "maxWithdrawalFee"
      | "migrateStrategy"
      | "owner"
      | "pause"
      | "paused"
      | "provider"
      | "removeManager"
      | "renounceOwnership"
      | "retireStrat"
      | "setDepositFee"
      | "setStrategy"
      | "setWithdrawalFee"
      | "strategies"
      | "strategyParams"
      | "totalAssetInVault"
      | "totalAssets"
      | "totalDebt"
      | "transferOwnership"
      | "unPause"
      | "vaultToken"
      | "waitingPool"
      | "withdrawAllFromStrategy"
      | "withdrawETH"
      | "withdrawFee"
      | "withdrawFromStrategy"
      | "withdrawInTokenFromStrategy"
      | "withdrawalFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BinancePoolChanged"
      | "Deposit"
      | "DepositFeeChanged"
      | "DepositedToStrategy"
      | "FeeClaimed"
      | "FeeReceiverChanged"
      | "Initialized"
      | "ManagerAdded"
      | "ManagerRemoved"
      | "MaxDepositFeeChanged"
      | "MaxWithdrawalFeeChanged"
      | "OwnershipTransferred"
      | "Paused"
      | "ProviderChanged"
      | "RouterChanged"
      | "StrategyAdded"
      | "StrategyAllocationChanged"
      | "StrategyMigrated"
      | "Unpaused"
      | "WaitingPoolCapChanged"
      | "WaitingPoolChanged"
      | "Withdraw"
      | "WithdrawalFeeChanged"
      | "WithdrawnFromStrategy"
      | "WithdrawnInTokenFromStrategy"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_STRATEGIES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "allocate", values?: undefined): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "availableToWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfTokenFromStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStrategyAllocation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAllToStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToStrategy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateInTokenFromStrategy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeEarned", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDepositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateStrategy",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "provider", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retireStrat",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssetInVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "waitingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllFromStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromStrategy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInTokenFromStrategy",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_STRATEGIES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfTokenFromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStrategyAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAllToStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateInTokenFromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeEarned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provider", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireStrat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssetInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "waitingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllFromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInTokenFromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFee",
    data: BytesLike
  ): Result;
}

export namespace BinancePoolChangedEvent {
  export type InputTuple = [binancePool: AddressLike];
  export type OutputTuple = [binancePool: string];
  export interface OutputObject {
    binancePool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositFeeChangedEvent {
  export type InputTuple = [newDepositFee: BigNumberish];
  export type OutputTuple = [newDepositFee: bigint];
  export interface OutputObject {
    newDepositFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedToStrategyEvent {
  export type InputTuple = [strategy: AddressLike, amount: BigNumberish];
  export type OutputTuple = [strategy: string, amount: bigint];
  export interface OutputObject {
    strategy: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeClaimedEvent {
  export type InputTuple = [receiver: AddressLike, amount: BigNumberish];
  export type OutputTuple = [receiver: string, amount: bigint];
  export interface OutputObject {
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeReceiverChangedEvent {
  export type InputTuple = [feeReceiver: AddressLike];
  export type OutputTuple = [feeReceiver: string];
  export interface OutputObject {
    feeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerAddedEvent {
  export type InputTuple = [newManager: AddressLike];
  export type OutputTuple = [newManager: string];
  export interface OutputObject {
    newManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerRemovedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxDepositFeeChangedEvent {
  export type InputTuple = [newMaxDepositFee: BigNumberish];
  export type OutputTuple = [newMaxDepositFee: bigint];
  export interface OutputObject {
    newMaxDepositFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWithdrawalFeeChangedEvent {
  export type InputTuple = [newMaxWithdrawalFee: BigNumberish];
  export type OutputTuple = [newMaxWithdrawalFee: bigint];
  export interface OutputObject {
    newMaxWithdrawalFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderChangedEvent {
  export type InputTuple = [provider: AddressLike];
  export type OutputTuple = [provider: string];
  export interface OutputObject {
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouterChangedEvent {
  export type InputTuple = [ceRouter: AddressLike];
  export type OutputTuple = [ceRouter: string];
  export interface OutputObject {
    ceRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyAddedEvent {
  export type InputTuple = [strategy: AddressLike, allocation: BigNumberish];
  export type OutputTuple = [strategy: string, allocation: bigint];
  export interface OutputObject {
    strategy: string;
    allocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyAllocationChangedEvent {
  export type InputTuple = [strategy: AddressLike, allocation: BigNumberish];
  export type OutputTuple = [strategy: string, allocation: bigint];
  export interface OutputObject {
    strategy: string;
    allocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyMigratedEvent {
  export type InputTuple = [
    oldStrategy: AddressLike,
    newStrategy: AddressLike,
    newAllocation: BigNumberish
  ];
  export type OutputTuple = [
    oldStrategy: string,
    newStrategy: string,
    newAllocation: bigint
  ];
  export interface OutputObject {
    oldStrategy: string;
    newStrategy: string;
    newAllocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WaitingPoolCapChangedEvent {
  export type InputTuple = [cap: BigNumberish];
  export type OutputTuple = [cap: bigint];
  export interface OutputObject {
    cap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WaitingPoolChangedEvent {
  export type InputTuple = [waitingPool: AddressLike];
  export type OutputTuple = [waitingPool: string];
  export interface OutputObject {
    waitingPool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalFeeChangedEvent {
  export type InputTuple = [newWithdrawalFee: BigNumberish];
  export type OutputTuple = [newWithdrawalFee: bigint];
  export interface OutputObject {
    newWithdrawalFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnFromStrategyEvent {
  export type InputTuple = [strategy: AddressLike, value: BigNumberish];
  export type OutputTuple = [strategy: string, value: bigint];
  export interface OutputObject {
    strategy: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnInTokenFromStrategyEvent {
  export type InputTuple = [strategy: AddressLike, value: BigNumberish];
  export type OutputTuple = [strategy: string, value: bigint];
  export interface OutputObject {
    strategy: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MasterVault extends BaseContract {
  connect(runner?: ContractRunner | null): MasterVault;
  waitForDeployment(): Promise<this>;

  interface: MasterVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_STRATEGIES: TypedContractMethod<[], [bigint], "view">;

  addManager: TypedContractMethod<
    [newManager: AddressLike],
    [void],
    "nonpayable"
  >;

  allocate: TypedContractMethod<[], [void], "nonpayable">;

  asset: TypedContractMethod<[], [string], "view">;

  availableToWithdraw: TypedContractMethod<[], [bigint], "view">;

  balanceOfTokenFromStrategy: TypedContractMethod<
    [strategy: AddressLike],
    [bigint],
    "view"
  >;

  changeFeeReceiver: TypedContractMethod<
    [_feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  changeProvider: TypedContractMethod<
    [newProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  changeStrategyAllocation: TypedContractMethod<
    [strategy: AddressLike, allocation: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositAllToStrategy: TypedContractMethod<
    [strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  depositETH: TypedContractMethod<[], [bigint], "payable">;

  depositFee: TypedContractMethod<[], [bigint], "view">;

  depositToStrategy: TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  estimateInTokenFromStrategy: TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  feeEarned: TypedContractMethod<[], [bigint], "view">;

  feeReceiver: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      maxDepositFees: BigNumberish,
      maxWithdrawalFees: BigNumberish,
      maxStrategies: BigNumberish,
      ceToken: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  manager: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  maxDepositFee: TypedContractMethod<[], [bigint], "view">;

  maxWithdrawalFee: TypedContractMethod<[], [bigint], "view">;

  migrateStrategy: TypedContractMethod<
    [
      oldStrategy: AddressLike,
      newStrategy: AddressLike,
      newAllocation: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeManager: TypedContractMethod<
    [_manager: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  retireStrat: TypedContractMethod<
    [strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  setDepositFee: TypedContractMethod<
    [newDepositFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStrategy: TypedContractMethod<
    [strategy: AddressLike, allocation: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawalFee: TypedContractMethod<
    [newWithdrawalFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  strategies: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  strategyParams: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        active: boolean;
        allocation: bigint;
        debt: bigint;
      }
    ],
    "view"
  >;

  totalAssetInVault: TypedContractMethod<[], [bigint], "view">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalDebt: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unPause: TypedContractMethod<[], [void], "nonpayable">;

  vaultToken: TypedContractMethod<[], [string], "view">;

  waitingPool: TypedContractMethod<[], [string], "view">;

  withdrawAllFromStrategy: TypedContractMethod<
    [strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawFee: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFromStrategy: TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawInTokenFromStrategy: TypedContractMethod<
    [strategy: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawalFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_STRATEGIES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addManager"
  ): TypedContractMethod<[newManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allocate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "availableToWithdraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfTokenFromStrategy"
  ): TypedContractMethod<[strategy: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeFeeReceiver"
  ): TypedContractMethod<[_feeReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeProvider"
  ): TypedContractMethod<[newProvider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeStrategyAllocation"
  ): TypedContractMethod<
    [strategy: AddressLike, allocation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositAllToStrategy"
  ): TypedContractMethod<[strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "depositFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositToStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "estimateInTokenFromStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeEarned"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      maxDepositFees: BigNumberish,
      maxWithdrawalFees: BigNumberish,
      maxStrategies: BigNumberish,
      ceToken: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxDepositFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdrawalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrateStrategy"
  ): TypedContractMethod<
    [
      oldStrategy: AddressLike,
      newStrategy: AddressLike,
      newAllocation: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "provider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeManager"
  ): TypedContractMethod<[_manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retireStrat"
  ): TypedContractMethod<[strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDepositFee"
  ): TypedContractMethod<[newDepositFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, allocation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWithdrawalFee"
  ): TypedContractMethod<
    [newWithdrawalFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "strategyParams"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        active: boolean;
        allocation: bigint;
        debt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalAssetInVault"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vaultToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "waitingPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawAllFromStrategy"
  ): TypedContractMethod<[strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFromStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawInTokenFromStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawalFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "BinancePoolChanged"
  ): TypedContractEvent<
    BinancePoolChangedEvent.InputTuple,
    BinancePoolChangedEvent.OutputTuple,
    BinancePoolChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "DepositFeeChanged"
  ): TypedContractEvent<
    DepositFeeChangedEvent.InputTuple,
    DepositFeeChangedEvent.OutputTuple,
    DepositFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "DepositedToStrategy"
  ): TypedContractEvent<
    DepositedToStrategyEvent.InputTuple,
    DepositedToStrategyEvent.OutputTuple,
    DepositedToStrategyEvent.OutputObject
  >;
  getEvent(
    key: "FeeClaimed"
  ): TypedContractEvent<
    FeeClaimedEvent.InputTuple,
    FeeClaimedEvent.OutputTuple,
    FeeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "FeeReceiverChanged"
  ): TypedContractEvent<
    FeeReceiverChangedEvent.InputTuple,
    FeeReceiverChangedEvent.OutputTuple,
    FeeReceiverChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerAdded"
  ): TypedContractEvent<
    ManagerAddedEvent.InputTuple,
    ManagerAddedEvent.OutputTuple,
    ManagerAddedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerRemoved"
  ): TypedContractEvent<
    ManagerRemovedEvent.InputTuple,
    ManagerRemovedEvent.OutputTuple,
    ManagerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MaxDepositFeeChanged"
  ): TypedContractEvent<
    MaxDepositFeeChangedEvent.InputTuple,
    MaxDepositFeeChangedEvent.OutputTuple,
    MaxDepositFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWithdrawalFeeChanged"
  ): TypedContractEvent<
    MaxWithdrawalFeeChangedEvent.InputTuple,
    MaxWithdrawalFeeChangedEvent.OutputTuple,
    MaxWithdrawalFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderChanged"
  ): TypedContractEvent<
    ProviderChangedEvent.InputTuple,
    ProviderChangedEvent.OutputTuple,
    ProviderChangedEvent.OutputObject
  >;
  getEvent(
    key: "RouterChanged"
  ): TypedContractEvent<
    RouterChangedEvent.InputTuple,
    RouterChangedEvent.OutputTuple,
    RouterChangedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyAdded"
  ): TypedContractEvent<
    StrategyAddedEvent.InputTuple,
    StrategyAddedEvent.OutputTuple,
    StrategyAddedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyAllocationChanged"
  ): TypedContractEvent<
    StrategyAllocationChangedEvent.InputTuple,
    StrategyAllocationChangedEvent.OutputTuple,
    StrategyAllocationChangedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyMigrated"
  ): TypedContractEvent<
    StrategyMigratedEvent.InputTuple,
    StrategyMigratedEvent.OutputTuple,
    StrategyMigratedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WaitingPoolCapChanged"
  ): TypedContractEvent<
    WaitingPoolCapChangedEvent.InputTuple,
    WaitingPoolCapChangedEvent.OutputTuple,
    WaitingPoolCapChangedEvent.OutputObject
  >;
  getEvent(
    key: "WaitingPoolChanged"
  ): TypedContractEvent<
    WaitingPoolChangedEvent.InputTuple,
    WaitingPoolChangedEvent.OutputTuple,
    WaitingPoolChangedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalFeeChanged"
  ): TypedContractEvent<
    WithdrawalFeeChangedEvent.InputTuple,
    WithdrawalFeeChangedEvent.OutputTuple,
    WithdrawalFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnFromStrategy"
  ): TypedContractEvent<
    WithdrawnFromStrategyEvent.InputTuple,
    WithdrawnFromStrategyEvent.OutputTuple,
    WithdrawnFromStrategyEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnInTokenFromStrategy"
  ): TypedContractEvent<
    WithdrawnInTokenFromStrategyEvent.InputTuple,
    WithdrawnInTokenFromStrategyEvent.OutputTuple,
    WithdrawnInTokenFromStrategyEvent.OutputObject
  >;

  filters: {
    "BinancePoolChanged(address)": TypedContractEvent<
      BinancePoolChangedEvent.InputTuple,
      BinancePoolChangedEvent.OutputTuple,
      BinancePoolChangedEvent.OutputObject
    >;
    BinancePoolChanged: TypedContractEvent<
      BinancePoolChangedEvent.InputTuple,
      BinancePoolChangedEvent.OutputTuple,
      BinancePoolChangedEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "DepositFeeChanged(uint256)": TypedContractEvent<
      DepositFeeChangedEvent.InputTuple,
      DepositFeeChangedEvent.OutputTuple,
      DepositFeeChangedEvent.OutputObject
    >;
    DepositFeeChanged: TypedContractEvent<
      DepositFeeChangedEvent.InputTuple,
      DepositFeeChangedEvent.OutputTuple,
      DepositFeeChangedEvent.OutputObject
    >;

    "DepositedToStrategy(address,uint256)": TypedContractEvent<
      DepositedToStrategyEvent.InputTuple,
      DepositedToStrategyEvent.OutputTuple,
      DepositedToStrategyEvent.OutputObject
    >;
    DepositedToStrategy: TypedContractEvent<
      DepositedToStrategyEvent.InputTuple,
      DepositedToStrategyEvent.OutputTuple,
      DepositedToStrategyEvent.OutputObject
    >;

    "FeeClaimed(address,uint256)": TypedContractEvent<
      FeeClaimedEvent.InputTuple,
      FeeClaimedEvent.OutputTuple,
      FeeClaimedEvent.OutputObject
    >;
    FeeClaimed: TypedContractEvent<
      FeeClaimedEvent.InputTuple,
      FeeClaimedEvent.OutputTuple,
      FeeClaimedEvent.OutputObject
    >;

    "FeeReceiverChanged(address)": TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;
    FeeReceiverChanged: TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ManagerAdded(address)": TypedContractEvent<
      ManagerAddedEvent.InputTuple,
      ManagerAddedEvent.OutputTuple,
      ManagerAddedEvent.OutputObject
    >;
    ManagerAdded: TypedContractEvent<
      ManagerAddedEvent.InputTuple,
      ManagerAddedEvent.OutputTuple,
      ManagerAddedEvent.OutputObject
    >;

    "ManagerRemoved(address)": TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;
    ManagerRemoved: TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;

    "MaxDepositFeeChanged(uint256)": TypedContractEvent<
      MaxDepositFeeChangedEvent.InputTuple,
      MaxDepositFeeChangedEvent.OutputTuple,
      MaxDepositFeeChangedEvent.OutputObject
    >;
    MaxDepositFeeChanged: TypedContractEvent<
      MaxDepositFeeChangedEvent.InputTuple,
      MaxDepositFeeChangedEvent.OutputTuple,
      MaxDepositFeeChangedEvent.OutputObject
    >;

    "MaxWithdrawalFeeChanged(uint256)": TypedContractEvent<
      MaxWithdrawalFeeChangedEvent.InputTuple,
      MaxWithdrawalFeeChangedEvent.OutputTuple,
      MaxWithdrawalFeeChangedEvent.OutputObject
    >;
    MaxWithdrawalFeeChanged: TypedContractEvent<
      MaxWithdrawalFeeChangedEvent.InputTuple,
      MaxWithdrawalFeeChangedEvent.OutputTuple,
      MaxWithdrawalFeeChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProviderChanged(address)": TypedContractEvent<
      ProviderChangedEvent.InputTuple,
      ProviderChangedEvent.OutputTuple,
      ProviderChangedEvent.OutputObject
    >;
    ProviderChanged: TypedContractEvent<
      ProviderChangedEvent.InputTuple,
      ProviderChangedEvent.OutputTuple,
      ProviderChangedEvent.OutputObject
    >;

    "RouterChanged(address)": TypedContractEvent<
      RouterChangedEvent.InputTuple,
      RouterChangedEvent.OutputTuple,
      RouterChangedEvent.OutputObject
    >;
    RouterChanged: TypedContractEvent<
      RouterChangedEvent.InputTuple,
      RouterChangedEvent.OutputTuple,
      RouterChangedEvent.OutputObject
    >;

    "StrategyAdded(address,uint256)": TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;
    StrategyAdded: TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;

    "StrategyAllocationChanged(address,uint256)": TypedContractEvent<
      StrategyAllocationChangedEvent.InputTuple,
      StrategyAllocationChangedEvent.OutputTuple,
      StrategyAllocationChangedEvent.OutputObject
    >;
    StrategyAllocationChanged: TypedContractEvent<
      StrategyAllocationChangedEvent.InputTuple,
      StrategyAllocationChangedEvent.OutputTuple,
      StrategyAllocationChangedEvent.OutputObject
    >;

    "StrategyMigrated(address,address,uint256)": TypedContractEvent<
      StrategyMigratedEvent.InputTuple,
      StrategyMigratedEvent.OutputTuple,
      StrategyMigratedEvent.OutputObject
    >;
    StrategyMigrated: TypedContractEvent<
      StrategyMigratedEvent.InputTuple,
      StrategyMigratedEvent.OutputTuple,
      StrategyMigratedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WaitingPoolCapChanged(uint256)": TypedContractEvent<
      WaitingPoolCapChangedEvent.InputTuple,
      WaitingPoolCapChangedEvent.OutputTuple,
      WaitingPoolCapChangedEvent.OutputObject
    >;
    WaitingPoolCapChanged: TypedContractEvent<
      WaitingPoolCapChangedEvent.InputTuple,
      WaitingPoolCapChangedEvent.OutputTuple,
      WaitingPoolCapChangedEvent.OutputObject
    >;

    "WaitingPoolChanged(address)": TypedContractEvent<
      WaitingPoolChangedEvent.InputTuple,
      WaitingPoolChangedEvent.OutputTuple,
      WaitingPoolChangedEvent.OutputObject
    >;
    WaitingPoolChanged: TypedContractEvent<
      WaitingPoolChangedEvent.InputTuple,
      WaitingPoolChangedEvent.OutputTuple,
      WaitingPoolChangedEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawalFeeChanged(uint256)": TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;
    WithdrawalFeeChanged: TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;

    "WithdrawnFromStrategy(address,uint256)": TypedContractEvent<
      WithdrawnFromStrategyEvent.InputTuple,
      WithdrawnFromStrategyEvent.OutputTuple,
      WithdrawnFromStrategyEvent.OutputObject
    >;
    WithdrawnFromStrategy: TypedContractEvent<
      WithdrawnFromStrategyEvent.InputTuple,
      WithdrawnFromStrategyEvent.OutputTuple,
      WithdrawnFromStrategyEvent.OutputObject
    >;

    "WithdrawnInTokenFromStrategy(address,uint256)": TypedContractEvent<
      WithdrawnInTokenFromStrategyEvent.InputTuple,
      WithdrawnInTokenFromStrategyEvent.OutputTuple,
      WithdrawnInTokenFromStrategyEvent.OutputObject
    >;
    WithdrawnInTokenFromStrategy: TypedContractEvent<
      WithdrawnInTokenFromStrategyEvent.InputTuple,
      WithdrawnInTokenFromStrategyEvent.OutputTuple,
      WithdrawnInTokenFromStrategyEvent.OutputObject
    >;
  };
}
