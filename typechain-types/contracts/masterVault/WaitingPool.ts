/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface WaitingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToQueue"
      | "capLimit"
      | "getPoolBalance"
      | "index"
      | "initialize"
      | "masterVault"
      | "people"
      | "setCapLimit"
      | "totalDebt"
      | "tryRemove"
      | "withdrawUnsettled"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "WithdrawCompleted"
      | "WithdrawPending"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToQueue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "capLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "index", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "masterVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "people",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCapLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(functionFragment: "tryRemove", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawUnsettled",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addToQueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "capLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "people", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCapLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tryRemove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnsettled",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawCompletedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawPendingEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WaitingPool extends BaseContract {
  connect(runner?: ContractRunner | null): WaitingPool;
  waitForDeployment(): Promise<this>;

  interface: WaitingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToQueue: TypedContractMethod<
    [_person: AddressLike, _debt: BigNumberish],
    [void],
    "nonpayable"
  >;

  capLimit: TypedContractMethod<[], [bigint], "view">;

  getPoolBalance: TypedContractMethod<[], [bigint], "view">;

  index: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [_masterVault: AddressLike, _capLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  masterVault: TypedContractMethod<[], [string], "view">;

  people: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        _address: string;
        _debt: bigint;
        _settled: boolean;
      }
    ],
    "view"
  >;

  setCapLimit: TypedContractMethod<
    [_capLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalDebt: TypedContractMethod<[], [bigint], "view">;

  tryRemove: TypedContractMethod<[], [void], "nonpayable">;

  withdrawUnsettled: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToQueue"
  ): TypedContractMethod<
    [_person: AddressLike, _debt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "capLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "index"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_masterVault: AddressLike, _capLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "masterVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "people"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        _address: string;
        _debt: bigint;
        _settled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setCapLimit"
  ): TypedContractMethod<[_capLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tryRemove"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawUnsettled"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawCompleted"
  ): TypedContractEvent<
    WithdrawCompletedEvent.InputTuple,
    WithdrawCompletedEvent.OutputTuple,
    WithdrawCompletedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawPending"
  ): TypedContractEvent<
    WithdrawPendingEvent.InputTuple,
    WithdrawPendingEvent.OutputTuple,
    WithdrawPendingEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "WithdrawCompleted(address,uint256)": TypedContractEvent<
      WithdrawCompletedEvent.InputTuple,
      WithdrawCompletedEvent.OutputTuple,
      WithdrawCompletedEvent.OutputObject
    >;
    WithdrawCompleted: TypedContractEvent<
      WithdrawCompletedEvent.InputTuple,
      WithdrawCompletedEvent.OutputTuple,
      WithdrawCompletedEvent.OutputObject
    >;

    "WithdrawPending(address,uint256)": TypedContractEvent<
      WithdrawPendingEvent.InputTuple,
      WithdrawPendingEvent.OutputTuple,
      WithdrawPendingEvent.OutputObject
    >;
    WithdrawPending: TypedContractEvent<
      WithdrawPendingEvent.InputTuple,
      WithdrawPendingEvent.OutputTuple,
      WithdrawPendingEvent.OutputObject
    >;
  };
}
