/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IMasterVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOfTokenFromStrategy"
      | "depositETH"
      | "estimateInTokenFromStrategy"
      | "feeReceiver"
      | "strategyParams"
      | "withdrawETH"
      | "withdrawInTokenFromStrategy"
      | "withdrawalFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BinancePoolChanged"
      | "DepositFeeChanged"
      | "DepositedToStrategy"
      | "FeeReceiverChanged"
      | "ManagerAdded"
      | "ManagerRemoved"
      | "MaxDepositFeeChanged"
      | "MaxWithdrawalFeeChanged"
      | "ProviderChanged"
      | "RouterChanged"
      | "StrategyAdded"
      | "StrategyAllocationChanged"
      | "StrategyMigrated"
      | "WaitingPoolCapChanged"
      | "WaitingPoolChanged"
      | "WithdrawalFeeChanged"
      | "WithdrawnFromStrategy"
      | "WithdrawnInTokenFromStrategy"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOfTokenFromStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateInTokenFromStrategy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategyParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInTokenFromStrategy",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceOfTokenFromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateInTokenFromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInTokenFromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFee",
    data: BytesLike
  ): Result;
}

export namespace BinancePoolChangedEvent {
  export type InputTuple = [binancePool: AddressLike];
  export type OutputTuple = [binancePool: string];
  export interface OutputObject {
    binancePool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositFeeChangedEvent {
  export type InputTuple = [newDepositFee: BigNumberish];
  export type OutputTuple = [newDepositFee: bigint];
  export interface OutputObject {
    newDepositFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedToStrategyEvent {
  export type InputTuple = [strategy: AddressLike, amount: BigNumberish];
  export type OutputTuple = [strategy: string, amount: bigint];
  export interface OutputObject {
    strategy: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeReceiverChangedEvent {
  export type InputTuple = [feeReceiver: AddressLike];
  export type OutputTuple = [feeReceiver: string];
  export interface OutputObject {
    feeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerAddedEvent {
  export type InputTuple = [newManager: AddressLike];
  export type OutputTuple = [newManager: string];
  export interface OutputObject {
    newManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerRemovedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxDepositFeeChangedEvent {
  export type InputTuple = [newMaxDepositFee: BigNumberish];
  export type OutputTuple = [newMaxDepositFee: bigint];
  export interface OutputObject {
    newMaxDepositFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWithdrawalFeeChangedEvent {
  export type InputTuple = [newMaxWithdrawalFee: BigNumberish];
  export type OutputTuple = [newMaxWithdrawalFee: bigint];
  export interface OutputObject {
    newMaxWithdrawalFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderChangedEvent {
  export type InputTuple = [provider: AddressLike];
  export type OutputTuple = [provider: string];
  export interface OutputObject {
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouterChangedEvent {
  export type InputTuple = [ceRouter: AddressLike];
  export type OutputTuple = [ceRouter: string];
  export interface OutputObject {
    ceRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyAddedEvent {
  export type InputTuple = [strategy: AddressLike, allocation: BigNumberish];
  export type OutputTuple = [strategy: string, allocation: bigint];
  export interface OutputObject {
    strategy: string;
    allocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyAllocationChangedEvent {
  export type InputTuple = [strategy: AddressLike, allocation: BigNumberish];
  export type OutputTuple = [strategy: string, allocation: bigint];
  export interface OutputObject {
    strategy: string;
    allocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyMigratedEvent {
  export type InputTuple = [
    oldStrategy: AddressLike,
    newStrategy: AddressLike,
    newAllocation: BigNumberish
  ];
  export type OutputTuple = [
    oldStrategy: string,
    newStrategy: string,
    newAllocation: bigint
  ];
  export interface OutputObject {
    oldStrategy: string;
    newStrategy: string;
    newAllocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WaitingPoolCapChangedEvent {
  export type InputTuple = [cap: BigNumberish];
  export type OutputTuple = [cap: bigint];
  export interface OutputObject {
    cap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WaitingPoolChangedEvent {
  export type InputTuple = [waitingPool: AddressLike];
  export type OutputTuple = [waitingPool: string];
  export interface OutputObject {
    waitingPool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalFeeChangedEvent {
  export type InputTuple = [newWithdrawalFee: BigNumberish];
  export type OutputTuple = [newWithdrawalFee: bigint];
  export interface OutputObject {
    newWithdrawalFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnFromStrategyEvent {
  export type InputTuple = [strategy: AddressLike, value: BigNumberish];
  export type OutputTuple = [strategy: string, value: bigint];
  export interface OutputObject {
    strategy: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnInTokenFromStrategyEvent {
  export type InputTuple = [strategy: AddressLike, value: BigNumberish];
  export type OutputTuple = [strategy: string, value: bigint];
  export interface OutputObject {
    strategy: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMasterVault extends BaseContract {
  connect(runner?: ContractRunner | null): IMasterVault;
  waitForDeployment(): Promise<this>;

  interface: IMasterVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOfTokenFromStrategy: TypedContractMethod<
    [strategy: AddressLike],
    [bigint],
    "view"
  >;

  depositETH: TypedContractMethod<[], [bigint], "payable">;

  estimateInTokenFromStrategy: TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  feeReceiver: TypedContractMethod<[], [string], "nonpayable">;

  strategyParams: TypedContractMethod<
    [strategy: AddressLike],
    [
      [boolean, bigint, bigint] & {
        active: boolean;
        allocation: bigint;
        debt: bigint;
      }
    ],
    "view"
  >;

  withdrawETH: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawInTokenFromStrategy: TypedContractMethod<
    [strategy: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawalFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOfTokenFromStrategy"
  ): TypedContractMethod<[strategy: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "estimateInTokenFromStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeReceiver"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "strategyParams"
  ): TypedContractMethod<
    [strategy: AddressLike],
    [
      [boolean, bigint, bigint] & {
        active: boolean;
        allocation: bigint;
        debt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawInTokenFromStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawalFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "BinancePoolChanged"
  ): TypedContractEvent<
    BinancePoolChangedEvent.InputTuple,
    BinancePoolChangedEvent.OutputTuple,
    BinancePoolChangedEvent.OutputObject
  >;
  getEvent(
    key: "DepositFeeChanged"
  ): TypedContractEvent<
    DepositFeeChangedEvent.InputTuple,
    DepositFeeChangedEvent.OutputTuple,
    DepositFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "DepositedToStrategy"
  ): TypedContractEvent<
    DepositedToStrategyEvent.InputTuple,
    DepositedToStrategyEvent.OutputTuple,
    DepositedToStrategyEvent.OutputObject
  >;
  getEvent(
    key: "FeeReceiverChanged"
  ): TypedContractEvent<
    FeeReceiverChangedEvent.InputTuple,
    FeeReceiverChangedEvent.OutputTuple,
    FeeReceiverChangedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerAdded"
  ): TypedContractEvent<
    ManagerAddedEvent.InputTuple,
    ManagerAddedEvent.OutputTuple,
    ManagerAddedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerRemoved"
  ): TypedContractEvent<
    ManagerRemovedEvent.InputTuple,
    ManagerRemovedEvent.OutputTuple,
    ManagerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MaxDepositFeeChanged"
  ): TypedContractEvent<
    MaxDepositFeeChangedEvent.InputTuple,
    MaxDepositFeeChangedEvent.OutputTuple,
    MaxDepositFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWithdrawalFeeChanged"
  ): TypedContractEvent<
    MaxWithdrawalFeeChangedEvent.InputTuple,
    MaxWithdrawalFeeChangedEvent.OutputTuple,
    MaxWithdrawalFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderChanged"
  ): TypedContractEvent<
    ProviderChangedEvent.InputTuple,
    ProviderChangedEvent.OutputTuple,
    ProviderChangedEvent.OutputObject
  >;
  getEvent(
    key: "RouterChanged"
  ): TypedContractEvent<
    RouterChangedEvent.InputTuple,
    RouterChangedEvent.OutputTuple,
    RouterChangedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyAdded"
  ): TypedContractEvent<
    StrategyAddedEvent.InputTuple,
    StrategyAddedEvent.OutputTuple,
    StrategyAddedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyAllocationChanged"
  ): TypedContractEvent<
    StrategyAllocationChangedEvent.InputTuple,
    StrategyAllocationChangedEvent.OutputTuple,
    StrategyAllocationChangedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyMigrated"
  ): TypedContractEvent<
    StrategyMigratedEvent.InputTuple,
    StrategyMigratedEvent.OutputTuple,
    StrategyMigratedEvent.OutputObject
  >;
  getEvent(
    key: "WaitingPoolCapChanged"
  ): TypedContractEvent<
    WaitingPoolCapChangedEvent.InputTuple,
    WaitingPoolCapChangedEvent.OutputTuple,
    WaitingPoolCapChangedEvent.OutputObject
  >;
  getEvent(
    key: "WaitingPoolChanged"
  ): TypedContractEvent<
    WaitingPoolChangedEvent.InputTuple,
    WaitingPoolChangedEvent.OutputTuple,
    WaitingPoolChangedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalFeeChanged"
  ): TypedContractEvent<
    WithdrawalFeeChangedEvent.InputTuple,
    WithdrawalFeeChangedEvent.OutputTuple,
    WithdrawalFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnFromStrategy"
  ): TypedContractEvent<
    WithdrawnFromStrategyEvent.InputTuple,
    WithdrawnFromStrategyEvent.OutputTuple,
    WithdrawnFromStrategyEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnInTokenFromStrategy"
  ): TypedContractEvent<
    WithdrawnInTokenFromStrategyEvent.InputTuple,
    WithdrawnInTokenFromStrategyEvent.OutputTuple,
    WithdrawnInTokenFromStrategyEvent.OutputObject
  >;

  filters: {
    "BinancePoolChanged(address)": TypedContractEvent<
      BinancePoolChangedEvent.InputTuple,
      BinancePoolChangedEvent.OutputTuple,
      BinancePoolChangedEvent.OutputObject
    >;
    BinancePoolChanged: TypedContractEvent<
      BinancePoolChangedEvent.InputTuple,
      BinancePoolChangedEvent.OutputTuple,
      BinancePoolChangedEvent.OutputObject
    >;

    "DepositFeeChanged(uint256)": TypedContractEvent<
      DepositFeeChangedEvent.InputTuple,
      DepositFeeChangedEvent.OutputTuple,
      DepositFeeChangedEvent.OutputObject
    >;
    DepositFeeChanged: TypedContractEvent<
      DepositFeeChangedEvent.InputTuple,
      DepositFeeChangedEvent.OutputTuple,
      DepositFeeChangedEvent.OutputObject
    >;

    "DepositedToStrategy(address,uint256)": TypedContractEvent<
      DepositedToStrategyEvent.InputTuple,
      DepositedToStrategyEvent.OutputTuple,
      DepositedToStrategyEvent.OutputObject
    >;
    DepositedToStrategy: TypedContractEvent<
      DepositedToStrategyEvent.InputTuple,
      DepositedToStrategyEvent.OutputTuple,
      DepositedToStrategyEvent.OutputObject
    >;

    "FeeReceiverChanged(address)": TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;
    FeeReceiverChanged: TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;

    "ManagerAdded(address)": TypedContractEvent<
      ManagerAddedEvent.InputTuple,
      ManagerAddedEvent.OutputTuple,
      ManagerAddedEvent.OutputObject
    >;
    ManagerAdded: TypedContractEvent<
      ManagerAddedEvent.InputTuple,
      ManagerAddedEvent.OutputTuple,
      ManagerAddedEvent.OutputObject
    >;

    "ManagerRemoved(address)": TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;
    ManagerRemoved: TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;

    "MaxDepositFeeChanged(uint256)": TypedContractEvent<
      MaxDepositFeeChangedEvent.InputTuple,
      MaxDepositFeeChangedEvent.OutputTuple,
      MaxDepositFeeChangedEvent.OutputObject
    >;
    MaxDepositFeeChanged: TypedContractEvent<
      MaxDepositFeeChangedEvent.InputTuple,
      MaxDepositFeeChangedEvent.OutputTuple,
      MaxDepositFeeChangedEvent.OutputObject
    >;

    "MaxWithdrawalFeeChanged(uint256)": TypedContractEvent<
      MaxWithdrawalFeeChangedEvent.InputTuple,
      MaxWithdrawalFeeChangedEvent.OutputTuple,
      MaxWithdrawalFeeChangedEvent.OutputObject
    >;
    MaxWithdrawalFeeChanged: TypedContractEvent<
      MaxWithdrawalFeeChangedEvent.InputTuple,
      MaxWithdrawalFeeChangedEvent.OutputTuple,
      MaxWithdrawalFeeChangedEvent.OutputObject
    >;

    "ProviderChanged(address)": TypedContractEvent<
      ProviderChangedEvent.InputTuple,
      ProviderChangedEvent.OutputTuple,
      ProviderChangedEvent.OutputObject
    >;
    ProviderChanged: TypedContractEvent<
      ProviderChangedEvent.InputTuple,
      ProviderChangedEvent.OutputTuple,
      ProviderChangedEvent.OutputObject
    >;

    "RouterChanged(address)": TypedContractEvent<
      RouterChangedEvent.InputTuple,
      RouterChangedEvent.OutputTuple,
      RouterChangedEvent.OutputObject
    >;
    RouterChanged: TypedContractEvent<
      RouterChangedEvent.InputTuple,
      RouterChangedEvent.OutputTuple,
      RouterChangedEvent.OutputObject
    >;

    "StrategyAdded(address,uint256)": TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;
    StrategyAdded: TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;

    "StrategyAllocationChanged(address,uint256)": TypedContractEvent<
      StrategyAllocationChangedEvent.InputTuple,
      StrategyAllocationChangedEvent.OutputTuple,
      StrategyAllocationChangedEvent.OutputObject
    >;
    StrategyAllocationChanged: TypedContractEvent<
      StrategyAllocationChangedEvent.InputTuple,
      StrategyAllocationChangedEvent.OutputTuple,
      StrategyAllocationChangedEvent.OutputObject
    >;

    "StrategyMigrated(address,address,uint256)": TypedContractEvent<
      StrategyMigratedEvent.InputTuple,
      StrategyMigratedEvent.OutputTuple,
      StrategyMigratedEvent.OutputObject
    >;
    StrategyMigrated: TypedContractEvent<
      StrategyMigratedEvent.InputTuple,
      StrategyMigratedEvent.OutputTuple,
      StrategyMigratedEvent.OutputObject
    >;

    "WaitingPoolCapChanged(uint256)": TypedContractEvent<
      WaitingPoolCapChangedEvent.InputTuple,
      WaitingPoolCapChangedEvent.OutputTuple,
      WaitingPoolCapChangedEvent.OutputObject
    >;
    WaitingPoolCapChanged: TypedContractEvent<
      WaitingPoolCapChangedEvent.InputTuple,
      WaitingPoolCapChangedEvent.OutputTuple,
      WaitingPoolCapChangedEvent.OutputObject
    >;

    "WaitingPoolChanged(address)": TypedContractEvent<
      WaitingPoolChangedEvent.InputTuple,
      WaitingPoolChangedEvent.OutputTuple,
      WaitingPoolChangedEvent.OutputObject
    >;
    WaitingPoolChanged: TypedContractEvent<
      WaitingPoolChangedEvent.InputTuple,
      WaitingPoolChangedEvent.OutputTuple,
      WaitingPoolChangedEvent.OutputObject
    >;

    "WithdrawalFeeChanged(uint256)": TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;
    WithdrawalFeeChanged: TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;

    "WithdrawnFromStrategy(address,uint256)": TypedContractEvent<
      WithdrawnFromStrategyEvent.InputTuple,
      WithdrawnFromStrategyEvent.OutputTuple,
      WithdrawnFromStrategyEvent.OutputObject
    >;
    WithdrawnFromStrategy: TypedContractEvent<
      WithdrawnFromStrategyEvent.InputTuple,
      WithdrawnFromStrategyEvent.OutputTuple,
      WithdrawnFromStrategyEvent.OutputObject
    >;

    "WithdrawnInTokenFromStrategy(address,uint256)": TypedContractEvent<
      WithdrawnInTokenFromStrategyEvent.InputTuple,
      WithdrawnInTokenFromStrategyEvent.OutputTuple,
      WithdrawnInTokenFromStrategyEvent.OutputObject
    >;
    WithdrawnInTokenFromStrategy: TypedContractEvent<
      WithdrawnInTokenFromStrategyEvent.InputTuple,
      WithdrawnInTokenFromStrategyEvent.OutputTuple,
      WithdrawnInTokenFromStrategyEvent.OutputObject
    >;
  };
}
