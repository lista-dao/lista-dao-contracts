/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777__factory>;
    getContractFactory(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Recipient__factory>;
    getContractFactory(
      name: "Abacus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Abacus__factory>;
    getContractFactory(
      name: "ExponentialDecrease",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExponentialDecrease__factory>;
    getContractFactory(
      name: "LinearDecrease",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinearDecrease__factory>;
    getContractFactory(
      name: "StairstepExponentialDecrease",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StairstepExponentialDecrease__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "CerosRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CerosRouter__factory>;
    getContractFactory(
      name: "CeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CeToken__factory>;
    getContractFactory(
      name: "CeVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CeVault__factory>;
    getContractFactory(
      name: "CeETHVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CeETHVault__factory>;
    getContractFactory(
      name: "CerosETHRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CerosETHRouter__factory>;
    getContractFactory(
      name: "HelioETHProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelioETHProvider__factory>;
    getContractFactory(
      name: "HETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HETH__factory>;
    getContractFactory(
      name: "HBNB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HBNB__factory>;
    getContractFactory(
      name: "HelioProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelioProvider__factory>;
    getContractFactory(
      name: "IBETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBETH__factory>;
    getContractFactory(
      name: "IBinancePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBinancePool__factory>;
    getContractFactory(
      name: "IBNBStakingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBNBStakingPool__factory>;
    getContractFactory(
      name: "IBondToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBondToken__factory>;
    getContractFactory(
      name: "ICerosETHRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICerosETHRouter__factory>;
    getContractFactory(
      name: "ICerosRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICerosRouter__factory>;
    getContractFactory(
      name: "ICertToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICertToken__factory>;
    getContractFactory(
      name: "IDao",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDao__factory>;
    getContractFactory(
      name: "IDex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDex__factory>;
    getContractFactory(
      name: "IETHVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IETHVault__factory>;
    getContractFactory(
      name: "IHelioETHProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHelioETHProvider__factory>;
    getContractFactory(
      name: "IHelioProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHelioProvider__factory>;
    getContractFactory(
      name: "IHelioProviderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHelioProviderV2__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "ABNBC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ABNBC__factory>;
    getContractFactory(
      name: "AbstractDex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractDex__factory>;
    getContractFactory(
      name: "Dao",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dao__factory>;
    getContractFactory(
      name: "Dex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dex__factory>;
    getContractFactory(
      name: "MintableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableERC20__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "StakingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingPool__factory>;
    getContractFactory(
      name: "WNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WNative__factory>;
    getContractFactory(
      name: "NonTransferableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonTransferableERC20__factory>;
    getContractFactory(
      name: "CeVaultV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CeVaultV2__factory>;
    getContractFactory(
      name: "HelioProviderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelioProviderV2__factory>;
    getContractFactory(
      name: "AbacusLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbacusLike__factory>;
    getContractFactory(
      name: "Clipper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Clipper__factory>;
    getContractFactory(
      name: "ClipperCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClipperCallee__factory>;
    getContractFactory(
      name: "DogLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DogLike__factory>;
    getContractFactory(
      name: "PipLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PipLike__factory>;
    getContractFactory(
      name: "SpotterLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpotterLike__factory>;
    getContractFactory(
      name: "ClipperLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClipperLike__factory>;
    getContractFactory(
      name: "Dog",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dog__factory>;
    getContractFactory(
      name: "VatLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VatLike__factory>;
    getContractFactory(
      name: "EmergencyShutdown",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmergencyShutdown__factory>;
    getContractFactory(
      name: "Flash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Flash__factory>;
    getContractFactory(
      name: "FlashBuy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashBuy__factory>;
    getContractFactory(
      name: "IDEX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDEX__factory>;
    getContractFactory(
      name: "Hay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hay__factory>;
    getContractFactory(
      name: "HelioRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelioRewards__factory>;
    getContractFactory(
      name: "HelioToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelioToken__factory>;
    getContractFactory(
      name: "Interaction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Interaction__factory>;
    getContractFactory(
      name: "ClipperLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClipperLike__factory>;
    getContractFactory(
      name: "DogLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DogLike__factory>;
    getContractFactory(
      name: "GemJoinLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GemJoinLike__factory>;
    getContractFactory(
      name: "GemLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GemLike__factory>;
    getContractFactory(
      name: "HayJoinLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HayJoinLike__factory>;
    getContractFactory(
      name: "HayLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HayLike__factory>;
    getContractFactory(
      name: "IAuctionProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuctionProxy__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "IMovingWindowOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMovingWindowOracle__factory>;
    getContractFactory(
      name: "IRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewards__factory>;
    getContractFactory(
      name: "JugLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JugLike__factory>;
    getContractFactory(
      name: "PipLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PipLike__factory>;
    getContractFactory(
      name: "SpotLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpotLike__factory>;
    getContractFactory(
      name: "VatLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VatLike__factory>;
    getContractFactory(
      name: "Jar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Jar__factory>;
    getContractFactory(
      name: "DSTokenLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSTokenLike__factory>;
    getContractFactory(
      name: "GemJoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GemJoin__factory>;
    getContractFactory(
      name: "HayJoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HayJoin__factory>;
    getContractFactory(
      name: "VatLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VatLike__factory>;
    getContractFactory(
      name: "Jug",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Jug__factory>;
    getContractFactory(
      name: "AuctionProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuctionProxy__factory>;
    getContractFactory(
      name: "LisUSD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LisUSD__factory>;
    getContractFactory(
      name: "CageLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CageLike__factory>;
    getContractFactory(
      name: "HelioTokenLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelioTokenLike__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "IMasterVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterVault__factory>;
    getContractFactory(
      name: "IWaitingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWaitingPool__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "MasterVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterVault__factory>;
    getContractFactory(
      name: "WaitingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WaitingPool__factory>;
    getContractFactory(
      name: "Elipsis",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Elipsis__factory>;
    getContractFactory(
      name: "ElipsisMediator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElipsisMediator__factory>;
    getContractFactory(
      name: "ABNBb",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ABNBb__factory>;
    getContractFactory(
      name: "ABNBc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ABNBc__factory>;
    getContractFactory(
      name: "BinancePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BinancePool__factory>;
    getContractFactory(
      name: "BnbxMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BnbxMock__factory>;
    getContractFactory(
      name: "BnbxStakeManagerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BnbxStakeManagerMock__factory>;
    getContractFactory(
      name: "MasterVaultMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterVaultMock__factory>;
    getContractFactory(
      name: "ReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReceiverMock__factory>;
    getContractFactory(
      name: "BtcbMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BtcbMock__factory>;
    getContractFactory(
      name: "IPancakeCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeCallee__factory>;
    getContractFactory(
      name: "IPancakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeERC20__factory>;
    getContractFactory(
      name: "IPancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeFactory__factory>;
    getContractFactory(
      name: "IPancakeMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeMigrator__factory>;
    getContractFactory(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: "IPancakeRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter01__factory>;
    getContractFactory(
      name: "IPancakeRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IXERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IXERC20__factory>;
    getContractFactory(
      name: "IUniswapV1Exchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV1Exchange__factory>;
    getContractFactory(
      name: "IUniswapV1Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV1Factory__factory>;
    getContractFactory(
      name: "FixedPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPoint__factory>;
    getContractFactory(
      name: "CalHash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CalHash__factory>;
    getContractFactory(
      name: "PancakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeERC20__factory>;
    getContractFactory(
      name: "PancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeFactory__factory>;
    getContractFactory(
      name: "PancakeMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeMigrator__factory>;
    getContractFactory(
      name: "PancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakePair__factory>;
    getContractFactory(
      name: "PancakeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeRouter__factory>;
    getContractFactory(
      name: "RewardsToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsToken__factory>;
    getContractFactory(
      name: "ERC20ModUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20ModUpgradeable__factory>;
    getContractFactory(
      name: "ERC20UpgradeableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20UpgradeableMock__factory>;
    getContractFactory(
      name: "FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashBorrower__factory>;
    getContractFactory(
      name: "Oracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Oracle__factory>;
    getContractFactory(
      name: "DaiJoinLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaiJoinLike__factory>;
    getContractFactory(
      name: "GemLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GemLike__factory>;
    getContractFactory(
      name: "ProxyLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyLike__factory>;
    getContractFactory(
      name: "SnBnbMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnBnbMock__factory>;
    getContractFactory(
      name: "SnBnbStakeManagerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnBnbStakeManagerMock__factory>;
    getContractFactory(
      name: "WBNB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WBNB__factory>;
    getContractFactory(
      name: "BnbOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BnbOracle__factory>;
    getContractFactory(
      name: "BtcOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BtcOracle__factory>;
    getContractFactory(
      name: "BusdOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BusdOracle__factory>;
    getContractFactory(
      name: "EthOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthOracle__factory>;
    getContractFactory(
      name: "HelioOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelioOracle__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "FixedPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPoint__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "PriceOracleTestnet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracleTestnet__factory>;
    getContractFactory(
      name: "SlidingWindowOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlidingWindowOracle__factory>;
    getContractFactory(
      name: "ISnBnbStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISnBnbStakeManager__factory>;
    getContractFactory(
      name: "Spotter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Spotter__factory>;
    getContractFactory(
      name: "IAddressStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressStore__factory>;
    getContractFactory(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Registry__factory>;
    getContractFactory(
      name: "IStakedBNBToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedBNBToken__factory>;
    getContractFactory(
      name: "IStakePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakePool__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "BnbxYieldConverterStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BnbxYieldConverterStrategy__factory>;
    getContractFactory(
      name: "CerosYieldConverterStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CerosYieldConverterStrategy__factory>;
    getContractFactory(
      name: "IBaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseStrategy__factory>;
    getContractFactory(
      name: "MockStkBnbStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStkBnbStrategy__factory>;
    getContractFactory(
      name: "SnBnbYieldConverterStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnBnbYieldConverterStrategy__factory>;
    getContractFactory(
      name: "StkBnbStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StkBnbStrategy__factory>;
    getContractFactory(
      name: "Vat",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vat__factory>;
    getContractFactory(
      name: "Vow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vow__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20PausableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PausableUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC777",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777>;
    getContractAt(
      name: "IERC777Recipient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Recipient>;
    getContractAt(
      name: "Abacus",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Abacus>;
    getContractAt(
      name: "ExponentialDecrease",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExponentialDecrease>;
    getContractAt(
      name: "LinearDecrease",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LinearDecrease>;
    getContractAt(
      name: "StairstepExponentialDecrease",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StairstepExponentialDecrease>;
    getContractAt(
      name: "IStakeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "CerosRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CerosRouter>;
    getContractAt(
      name: "CeToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CeToken>;
    getContractAt(
      name: "CeVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CeVault>;
    getContractAt(
      name: "CeETHVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CeETHVault>;
    getContractAt(
      name: "CerosETHRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CerosETHRouter>;
    getContractAt(
      name: "HelioETHProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HelioETHProvider>;
    getContractAt(
      name: "HETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HETH>;
    getContractAt(
      name: "HBNB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HBNB>;
    getContractAt(
      name: "HelioProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HelioProvider>;
    getContractAt(
      name: "IBETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBETH>;
    getContractAt(
      name: "IBinancePool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBinancePool>;
    getContractAt(
      name: "IBNBStakingPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBNBStakingPool>;
    getContractAt(
      name: "IBondToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBondToken>;
    getContractAt(
      name: "ICerosETHRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICerosETHRouter>;
    getContractAt(
      name: "ICerosRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICerosRouter>;
    getContractAt(
      name: "ICertToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICertToken>;
    getContractAt(
      name: "IDao",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDao>;
    getContractAt(
      name: "IDex",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDex>;
    getContractAt(
      name: "IETHVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IETHVault>;
    getContractAt(
      name: "IHelioETHProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHelioETHProvider>;
    getContractAt(
      name: "IHelioProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHelioProvider>;
    getContractAt(
      name: "IHelioProviderV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHelioProviderV2>;
    getContractAt(
      name: "IVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "ABNBC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ABNBC>;
    getContractAt(
      name: "AbstractDex",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractDex>;
    getContractAt(
      name: "Dao",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Dao>;
    getContractAt(
      name: "Dex",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Dex>;
    getContractAt(
      name: "MintableERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableERC20>;
    getContractAt(
      name: "Pool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "StakingPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingPool>;
    getContractAt(
      name: "WNative",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WNative>;
    getContractAt(
      name: "NonTransferableERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NonTransferableERC20>;
    getContractAt(
      name: "CeVaultV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CeVaultV2>;
    getContractAt(
      name: "HelioProviderV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HelioProviderV2>;
    getContractAt(
      name: "AbacusLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AbacusLike>;
    getContractAt(
      name: "Clipper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Clipper>;
    getContractAt(
      name: "ClipperCallee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClipperCallee>;
    getContractAt(
      name: "DogLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DogLike>;
    getContractAt(
      name: "PipLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PipLike>;
    getContractAt(
      name: "SpotterLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SpotterLike>;
    getContractAt(
      name: "ClipperLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClipperLike>;
    getContractAt(
      name: "Dog",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Dog>;
    getContractAt(
      name: "VatLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VatLike>;
    getContractAt(
      name: "EmergencyShutdown",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmergencyShutdown>;
    getContractAt(
      name: "Flash",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Flash>;
    getContractAt(
      name: "FlashBuy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashBuy>;
    getContractAt(
      name: "IDEX",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDEX>;
    getContractAt(
      name: "Hay",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Hay>;
    getContractAt(
      name: "HelioRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HelioRewards>;
    getContractAt(
      name: "HelioToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HelioToken>;
    getContractAt(
      name: "Interaction",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Interaction>;
    getContractAt(
      name: "ClipperLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClipperLike>;
    getContractAt(
      name: "DogLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DogLike>;
    getContractAt(
      name: "GemJoinLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GemJoinLike>;
    getContractAt(
      name: "GemLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GemLike>;
    getContractAt(
      name: "HayJoinLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HayJoinLike>;
    getContractAt(
      name: "HayLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HayLike>;
    getContractAt(
      name: "IAuctionProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuctionProxy>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "IMovingWindowOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMovingWindowOracle>;
    getContractAt(
      name: "IRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewards>;
    getContractAt(
      name: "JugLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.JugLike>;
    getContractAt(
      name: "PipLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PipLike>;
    getContractAt(
      name: "SpotLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SpotLike>;
    getContractAt(
      name: "VatLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VatLike>;
    getContractAt(
      name: "Jar",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Jar>;
    getContractAt(
      name: "DSTokenLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSTokenLike>;
    getContractAt(
      name: "GemJoin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GemJoin>;
    getContractAt(
      name: "HayJoin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HayJoin>;
    getContractAt(
      name: "VatLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VatLike>;
    getContractAt(
      name: "Jug",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Jug>;
    getContractAt(
      name: "AuctionProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AuctionProxy>;
    getContractAt(
      name: "LisUSD",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LisUSD>;
    getContractAt(
      name: "CageLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CageLike>;
    getContractAt(
      name: "HelioTokenLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HelioTokenLike>;
    getContractAt(
      name: "Lock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "IMasterVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterVault>;
    getContractAt(
      name: "IWaitingPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWaitingPool>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "MasterVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterVault>;
    getContractAt(
      name: "WaitingPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WaitingPool>;
    getContractAt(
      name: "Elipsis",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Elipsis>;
    getContractAt(
      name: "ElipsisMediator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ElipsisMediator>;
    getContractAt(
      name: "ABNBb",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ABNBb>;
    getContractAt(
      name: "ABNBc",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ABNBc>;
    getContractAt(
      name: "BinancePool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BinancePool>;
    getContractAt(
      name: "BnbxMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BnbxMock>;
    getContractAt(
      name: "BnbxStakeManagerMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BnbxStakeManagerMock>;
    getContractAt(
      name: "MasterVaultMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterVaultMock>;
    getContractAt(
      name: "ReceiverMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReceiverMock>;
    getContractAt(
      name: "BtcbMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BtcbMock>;
    getContractAt(
      name: "IPancakeCallee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeCallee>;
    getContractAt(
      name: "IPancakeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeERC20>;
    getContractAt(
      name: "IPancakeFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeFactory>;
    getContractAt(
      name: "IPancakeMigrator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeMigrator>;
    getContractAt(
      name: "IPancakePair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakePair>;
    getContractAt(
      name: "IPancakeRouter01",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter01>;
    getContractAt(
      name: "IPancakeRouter02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter02>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IXERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IXERC20>;
    getContractAt(
      name: "IUniswapV1Exchange",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV1Exchange>;
    getContractAt(
      name: "IUniswapV1Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV1Factory>;
    getContractAt(
      name: "FixedPoint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedPoint>;
    getContractAt(
      name: "CalHash",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CalHash>;
    getContractAt(
      name: "PancakeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeERC20>;
    getContractAt(
      name: "PancakeFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeFactory>;
    getContractAt(
      name: "PancakeMigrator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeMigrator>;
    getContractAt(
      name: "PancakePair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakePair>;
    getContractAt(
      name: "PancakeRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeRouter>;
    getContractAt(
      name: "RewardsToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsToken>;
    getContractAt(
      name: "ERC20ModUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20ModUpgradeable>;
    getContractAt(
      name: "ERC20UpgradeableMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20UpgradeableMock>;
    getContractAt(
      name: "FlashBorrower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashBorrower>;
    getContractAt(
      name: "Oracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Oracle>;
    getContractAt(
      name: "DaiJoinLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DaiJoinLike>;
    getContractAt(
      name: "GemLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GemLike>;
    getContractAt(
      name: "ProxyLike",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyLike>;
    getContractAt(
      name: "SnBnbMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SnBnbMock>;
    getContractAt(
      name: "SnBnbStakeManagerMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SnBnbStakeManagerMock>;
    getContractAt(
      name: "WBNB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WBNB>;
    getContractAt(
      name: "BnbOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BnbOracle>;
    getContractAt(
      name: "BtcOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BtcOracle>;
    getContractAt(
      name: "BusdOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BusdOracle>;
    getContractAt(
      name: "EthOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EthOracle>;
    getContractAt(
      name: "HelioOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HelioOracle>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "FixedPoint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedPoint>;
    getContractAt(
      name: "PriceOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "PriceOracleTestnet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracleTestnet>;
    getContractAt(
      name: "SlidingWindowOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SlidingWindowOracle>;
    getContractAt(
      name: "ISnBnbStakeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISnBnbStakeManager>;
    getContractAt(
      name: "Spotter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Spotter>;
    getContractAt(
      name: "IAddressStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressStore>;
    getContractAt(
      name: "IERC1820Registry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Registry>;
    getContractAt(
      name: "IStakedBNBToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedBNBToken>;
    getContractAt(
      name: "IStakePool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakePool>;
    getContractAt(
      name: "BaseStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategy>;
    getContractAt(
      name: "BnbxYieldConverterStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BnbxYieldConverterStrategy>;
    getContractAt(
      name: "CerosYieldConverterStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CerosYieldConverterStrategy>;
    getContractAt(
      name: "IBaseStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseStrategy>;
    getContractAt(
      name: "MockStkBnbStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStkBnbStrategy>;
    getContractAt(
      name: "SnBnbYieldConverterStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SnBnbYieldConverterStrategy>;
    getContractAt(
      name: "StkBnbStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StkBnbStrategy>;
    getContractAt(
      name: "Vat",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Vat>;
    getContractAt(
      name: "Vow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Vow>;

    deployContract(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    deployContract(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeaconUpgradeable>;
    deployContract(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "ERC20PausableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20PausableUpgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC777",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC777>;
    deployContract(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC777Recipient>;
    deployContract(
      name: "Abacus",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Abacus>;
    deployContract(
      name: "ExponentialDecrease",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExponentialDecrease>;
    deployContract(
      name: "LinearDecrease",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LinearDecrease>;
    deployContract(
      name: "StairstepExponentialDecrease",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StairstepExponentialDecrease>;
    deployContract(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeManager>;
    deployContract(
      name: "CerosRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CerosRouter>;
    deployContract(
      name: "CeToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeToken>;
    deployContract(
      name: "CeVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeVault>;
    deployContract(
      name: "CeETHVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeETHVault>;
    deployContract(
      name: "CerosETHRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CerosETHRouter>;
    deployContract(
      name: "HelioETHProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioETHProvider>;
    deployContract(
      name: "HETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HETH>;
    deployContract(
      name: "HBNB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HBNB>;
    deployContract(
      name: "HelioProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioProvider>;
    deployContract(
      name: "IBETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBETH>;
    deployContract(
      name: "IBinancePool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBinancePool>;
    deployContract(
      name: "IBNBStakingPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBNBStakingPool>;
    deployContract(
      name: "IBondToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBondToken>;
    deployContract(
      name: "ICerosETHRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICerosETHRouter>;
    deployContract(
      name: "ICerosRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICerosRouter>;
    deployContract(
      name: "ICertToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICertToken>;
    deployContract(
      name: "IDao",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDao>;
    deployContract(
      name: "IDex",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDex>;
    deployContract(
      name: "IETHVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IETHVault>;
    deployContract(
      name: "IHelioETHProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHelioETHProvider>;
    deployContract(
      name: "IHelioProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHelioProvider>;
    deployContract(
      name: "IHelioProviderV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHelioProviderV2>;
    deployContract(
      name: "IVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "ABNBC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ABNBC>;
    deployContract(
      name: "AbstractDex",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AbstractDex>;
    deployContract(
      name: "Dao",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dao>;
    deployContract(
      name: "Dex",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dex>;
    deployContract(
      name: "MintableERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintableERC20>;
    deployContract(
      name: "Pool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pool>;
    deployContract(
      name: "StakingPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingPool>;
    deployContract(
      name: "WNative",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WNative>;
    deployContract(
      name: "NonTransferableERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NonTransferableERC20>;
    deployContract(
      name: "CeVaultV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeVaultV2>;
    deployContract(
      name: "HelioProviderV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioProviderV2>;
    deployContract(
      name: "AbacusLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AbacusLike>;
    deployContract(
      name: "Clipper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Clipper>;
    deployContract(
      name: "ClipperCallee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClipperCallee>;
    deployContract(
      name: "DogLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DogLike>;
    deployContract(
      name: "PipLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PipLike>;
    deployContract(
      name: "SpotterLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotterLike>;
    deployContract(
      name: "ClipperLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClipperLike>;
    deployContract(
      name: "Dog",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dog>;
    deployContract(
      name: "VatLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VatLike>;
    deployContract(
      name: "EmergencyShutdown",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmergencyShutdown>;
    deployContract(
      name: "Flash",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Flash>;
    deployContract(
      name: "FlashBuy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FlashBuy>;
    deployContract(
      name: "IDEX",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDEX>;
    deployContract(
      name: "Hay",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hay>;
    deployContract(
      name: "HelioRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioRewards>;
    deployContract(
      name: "HelioToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioToken>;
    deployContract(
      name: "Interaction",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Interaction>;
    deployContract(
      name: "ClipperLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClipperLike>;
    deployContract(
      name: "DogLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DogLike>;
    deployContract(
      name: "GemJoinLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GemJoinLike>;
    deployContract(
      name: "GemLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GemLike>;
    deployContract(
      name: "HayJoinLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HayJoinLike>;
    deployContract(
      name: "HayLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HayLike>;
    deployContract(
      name: "IAuctionProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAuctionProxy>;
    deployContract(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC3156FlashBorrower>;
    deployContract(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC3156FlashLender>;
    deployContract(
      name: "IMovingWindowOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMovingWindowOracle>;
    deployContract(
      name: "IRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewards>;
    deployContract(
      name: "JugLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.JugLike>;
    deployContract(
      name: "PipLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PipLike>;
    deployContract(
      name: "SpotLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotLike>;
    deployContract(
      name: "VatLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VatLike>;
    deployContract(
      name: "Jar",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Jar>;
    deployContract(
      name: "DSTokenLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSTokenLike>;
    deployContract(
      name: "GemJoin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GemJoin>;
    deployContract(
      name: "HayJoin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HayJoin>;
    deployContract(
      name: "VatLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VatLike>;
    deployContract(
      name: "Jug",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Jug>;
    deployContract(
      name: "AuctionProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuctionProxy>;
    deployContract(
      name: "LisUSD",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LisUSD>;
    deployContract(
      name: "CageLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CageLike>;
    deployContract(
      name: "HelioTokenLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioTokenLike>;
    deployContract(
      name: "Lock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "IMasterVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterVault>;
    deployContract(
      name: "IWaitingPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWaitingPool>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MasterVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterVault>;
    deployContract(
      name: "WaitingPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WaitingPool>;
    deployContract(
      name: "Elipsis",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Elipsis>;
    deployContract(
      name: "ElipsisMediator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElipsisMediator>;
    deployContract(
      name: "ABNBb",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ABNBb>;
    deployContract(
      name: "ABNBc",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ABNBc>;
    deployContract(
      name: "BinancePool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BinancePool>;
    deployContract(
      name: "BnbxMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbxMock>;
    deployContract(
      name: "BnbxStakeManagerMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbxStakeManagerMock>;
    deployContract(
      name: "MasterVaultMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterVaultMock>;
    deployContract(
      name: "ReceiverMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReceiverMock>;
    deployContract(
      name: "BtcbMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BtcbMock>;
    deployContract(
      name: "IPancakeCallee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeCallee>;
    deployContract(
      name: "IPancakeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeERC20>;
    deployContract(
      name: "IPancakeFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeFactory>;
    deployContract(
      name: "IPancakeMigrator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeMigrator>;
    deployContract(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakePair>;
    deployContract(
      name: "IPancakeRouter01",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeRouter01>;
    deployContract(
      name: "IPancakeRouter02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeRouter02>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IXERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IXERC20>;
    deployContract(
      name: "IUniswapV1Exchange",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV1Exchange>;
    deployContract(
      name: "IUniswapV1Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV1Factory>;
    deployContract(
      name: "FixedPoint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FixedPoint>;
    deployContract(
      name: "CalHash",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CalHash>;
    deployContract(
      name: "PancakeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakeERC20>;
    deployContract(
      name: "PancakeFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakeFactory>;
    deployContract(
      name: "PancakeMigrator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakeMigrator>;
    deployContract(
      name: "PancakePair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakePair>;
    deployContract(
      name: "PancakeRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakeRouter>;
    deployContract(
      name: "RewardsToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardsToken>;
    deployContract(
      name: "ERC20ModUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20ModUpgradeable>;
    deployContract(
      name: "ERC20UpgradeableMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20UpgradeableMock>;
    deployContract(
      name: "FlashBorrower",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FlashBorrower>;
    deployContract(
      name: "Oracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Oracle>;
    deployContract(
      name: "DaiJoinLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DaiJoinLike>;
    deployContract(
      name: "GemLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GemLike>;
    deployContract(
      name: "ProxyLike",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyLike>;
    deployContract(
      name: "SnBnbMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SnBnbMock>;
    deployContract(
      name: "SnBnbStakeManagerMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SnBnbStakeManagerMock>;
    deployContract(
      name: "WBNB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WBNB>;
    deployContract(
      name: "BnbOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbOracle>;
    deployContract(
      name: "BtcOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BtcOracle>;
    deployContract(
      name: "BusdOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BusdOracle>;
    deployContract(
      name: "EthOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthOracle>;
    deployContract(
      name: "HelioOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioOracle>;
    deployContract(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "FixedPoint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FixedPoint>;
    deployContract(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceOracle>;
    deployContract(
      name: "PriceOracleTestnet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceOracleTestnet>;
    deployContract(
      name: "SlidingWindowOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SlidingWindowOracle>;
    deployContract(
      name: "ISnBnbStakeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISnBnbStakeManager>;
    deployContract(
      name: "Spotter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Spotter>;
    deployContract(
      name: "IAddressStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressStore>;
    deployContract(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1820Registry>;
    deployContract(
      name: "IStakedBNBToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakedBNBToken>;
    deployContract(
      name: "IStakePool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakePool>;
    deployContract(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStrategy>;
    deployContract(
      name: "BnbxYieldConverterStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbxYieldConverterStrategy>;
    deployContract(
      name: "CerosYieldConverterStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CerosYieldConverterStrategy>;
    deployContract(
      name: "IBaseStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseStrategy>;
    deployContract(
      name: "MockStkBnbStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockStkBnbStrategy>;
    deployContract(
      name: "SnBnbYieldConverterStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SnBnbYieldConverterStrategy>;
    deployContract(
      name: "StkBnbStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StkBnbStrategy>;
    deployContract(
      name: "Vat",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vat>;
    deployContract(
      name: "Vow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vow>;

    deployContract(
      name: "AggregatorV3Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "IERC1822ProxiableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    deployContract(
      name: "IBeaconUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeaconUpgradeable>;
    deployContract(
      name: "ERC1967UpgradeUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "ERC20PausableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20PausableUpgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC777",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC777>;
    deployContract(
      name: "IERC777Recipient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC777Recipient>;
    deployContract(
      name: "Abacus",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Abacus>;
    deployContract(
      name: "ExponentialDecrease",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExponentialDecrease>;
    deployContract(
      name: "LinearDecrease",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LinearDecrease>;
    deployContract(
      name: "StairstepExponentialDecrease",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StairstepExponentialDecrease>;
    deployContract(
      name: "IStakeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeManager>;
    deployContract(
      name: "CerosRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CerosRouter>;
    deployContract(
      name: "CeToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeToken>;
    deployContract(
      name: "CeVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeVault>;
    deployContract(
      name: "CeETHVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeETHVault>;
    deployContract(
      name: "CerosETHRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CerosETHRouter>;
    deployContract(
      name: "HelioETHProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioETHProvider>;
    deployContract(
      name: "HETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HETH>;
    deployContract(
      name: "HBNB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HBNB>;
    deployContract(
      name: "HelioProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioProvider>;
    deployContract(
      name: "IBETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBETH>;
    deployContract(
      name: "IBinancePool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBinancePool>;
    deployContract(
      name: "IBNBStakingPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBNBStakingPool>;
    deployContract(
      name: "IBondToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBondToken>;
    deployContract(
      name: "ICerosETHRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICerosETHRouter>;
    deployContract(
      name: "ICerosRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICerosRouter>;
    deployContract(
      name: "ICertToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICertToken>;
    deployContract(
      name: "IDao",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDao>;
    deployContract(
      name: "IDex",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDex>;
    deployContract(
      name: "IETHVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IETHVault>;
    deployContract(
      name: "IHelioETHProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHelioETHProvider>;
    deployContract(
      name: "IHelioProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHelioProvider>;
    deployContract(
      name: "IHelioProviderV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHelioProviderV2>;
    deployContract(
      name: "IVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "ABNBC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ABNBC>;
    deployContract(
      name: "AbstractDex",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AbstractDex>;
    deployContract(
      name: "Dao",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dao>;
    deployContract(
      name: "Dex",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dex>;
    deployContract(
      name: "MintableERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintableERC20>;
    deployContract(
      name: "Pool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pool>;
    deployContract(
      name: "StakingPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingPool>;
    deployContract(
      name: "WNative",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WNative>;
    deployContract(
      name: "NonTransferableERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NonTransferableERC20>;
    deployContract(
      name: "CeVaultV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeVaultV2>;
    deployContract(
      name: "HelioProviderV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioProviderV2>;
    deployContract(
      name: "AbacusLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AbacusLike>;
    deployContract(
      name: "Clipper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Clipper>;
    deployContract(
      name: "ClipperCallee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClipperCallee>;
    deployContract(
      name: "DogLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DogLike>;
    deployContract(
      name: "PipLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PipLike>;
    deployContract(
      name: "SpotterLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotterLike>;
    deployContract(
      name: "ClipperLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClipperLike>;
    deployContract(
      name: "Dog",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dog>;
    deployContract(
      name: "VatLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VatLike>;
    deployContract(
      name: "EmergencyShutdown",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmergencyShutdown>;
    deployContract(
      name: "Flash",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Flash>;
    deployContract(
      name: "FlashBuy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FlashBuy>;
    deployContract(
      name: "IDEX",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDEX>;
    deployContract(
      name: "Hay",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hay>;
    deployContract(
      name: "HelioRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioRewards>;
    deployContract(
      name: "HelioToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioToken>;
    deployContract(
      name: "Interaction",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Interaction>;
    deployContract(
      name: "ClipperLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClipperLike>;
    deployContract(
      name: "DogLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DogLike>;
    deployContract(
      name: "GemJoinLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GemJoinLike>;
    deployContract(
      name: "GemLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GemLike>;
    deployContract(
      name: "HayJoinLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HayJoinLike>;
    deployContract(
      name: "HayLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HayLike>;
    deployContract(
      name: "IAuctionProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAuctionProxy>;
    deployContract(
      name: "IERC3156FlashBorrower",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC3156FlashBorrower>;
    deployContract(
      name: "IERC3156FlashLender",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC3156FlashLender>;
    deployContract(
      name: "IMovingWindowOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMovingWindowOracle>;
    deployContract(
      name: "IRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewards>;
    deployContract(
      name: "JugLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.JugLike>;
    deployContract(
      name: "PipLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PipLike>;
    deployContract(
      name: "SpotLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotLike>;
    deployContract(
      name: "VatLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VatLike>;
    deployContract(
      name: "Jar",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Jar>;
    deployContract(
      name: "DSTokenLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSTokenLike>;
    deployContract(
      name: "GemJoin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GemJoin>;
    deployContract(
      name: "HayJoin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HayJoin>;
    deployContract(
      name: "VatLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VatLike>;
    deployContract(
      name: "Jug",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Jug>;
    deployContract(
      name: "AuctionProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuctionProxy>;
    deployContract(
      name: "LisUSD",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LisUSD>;
    deployContract(
      name: "CageLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CageLike>;
    deployContract(
      name: "HelioTokenLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioTokenLike>;
    deployContract(
      name: "Lock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "IMasterVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterVault>;
    deployContract(
      name: "IWaitingPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWaitingPool>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MasterVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterVault>;
    deployContract(
      name: "WaitingPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WaitingPool>;
    deployContract(
      name: "Elipsis",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Elipsis>;
    deployContract(
      name: "ElipsisMediator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ElipsisMediator>;
    deployContract(
      name: "ABNBb",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ABNBb>;
    deployContract(
      name: "ABNBc",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ABNBc>;
    deployContract(
      name: "BinancePool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BinancePool>;
    deployContract(
      name: "BnbxMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbxMock>;
    deployContract(
      name: "BnbxStakeManagerMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbxStakeManagerMock>;
    deployContract(
      name: "MasterVaultMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterVaultMock>;
    deployContract(
      name: "ReceiverMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReceiverMock>;
    deployContract(
      name: "BtcbMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BtcbMock>;
    deployContract(
      name: "IPancakeCallee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeCallee>;
    deployContract(
      name: "IPancakeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeERC20>;
    deployContract(
      name: "IPancakeFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeFactory>;
    deployContract(
      name: "IPancakeMigrator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeMigrator>;
    deployContract(
      name: "IPancakePair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakePair>;
    deployContract(
      name: "IPancakeRouter01",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeRouter01>;
    deployContract(
      name: "IPancakeRouter02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPancakeRouter02>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IXERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IXERC20>;
    deployContract(
      name: "IUniswapV1Exchange",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV1Exchange>;
    deployContract(
      name: "IUniswapV1Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV1Factory>;
    deployContract(
      name: "FixedPoint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FixedPoint>;
    deployContract(
      name: "CalHash",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CalHash>;
    deployContract(
      name: "PancakeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakeERC20>;
    deployContract(
      name: "PancakeFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakeFactory>;
    deployContract(
      name: "PancakeMigrator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakeMigrator>;
    deployContract(
      name: "PancakePair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakePair>;
    deployContract(
      name: "PancakeRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PancakeRouter>;
    deployContract(
      name: "RewardsToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardsToken>;
    deployContract(
      name: "ERC20ModUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20ModUpgradeable>;
    deployContract(
      name: "ERC20UpgradeableMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20UpgradeableMock>;
    deployContract(
      name: "FlashBorrower",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FlashBorrower>;
    deployContract(
      name: "Oracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Oracle>;
    deployContract(
      name: "DaiJoinLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DaiJoinLike>;
    deployContract(
      name: "GemLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GemLike>;
    deployContract(
      name: "ProxyLike",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyLike>;
    deployContract(
      name: "SnBnbMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SnBnbMock>;
    deployContract(
      name: "SnBnbStakeManagerMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SnBnbStakeManagerMock>;
    deployContract(
      name: "WBNB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WBNB>;
    deployContract(
      name: "BnbOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbOracle>;
    deployContract(
      name: "BtcOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BtcOracle>;
    deployContract(
      name: "BusdOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BusdOracle>;
    deployContract(
      name: "EthOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthOracle>;
    deployContract(
      name: "HelioOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HelioOracle>;
    deployContract(
      name: "IUniswapV2Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "FixedPoint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FixedPoint>;
    deployContract(
      name: "PriceOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceOracle>;
    deployContract(
      name: "PriceOracleTestnet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceOracleTestnet>;
    deployContract(
      name: "SlidingWindowOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SlidingWindowOracle>;
    deployContract(
      name: "ISnBnbStakeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISnBnbStakeManager>;
    deployContract(
      name: "Spotter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Spotter>;
    deployContract(
      name: "IAddressStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressStore>;
    deployContract(
      name: "IERC1820Registry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1820Registry>;
    deployContract(
      name: "IStakedBNBToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakedBNBToken>;
    deployContract(
      name: "IStakePool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakePool>;
    deployContract(
      name: "BaseStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStrategy>;
    deployContract(
      name: "BnbxYieldConverterStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbxYieldConverterStrategy>;
    deployContract(
      name: "CerosYieldConverterStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CerosYieldConverterStrategy>;
    deployContract(
      name: "IBaseStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseStrategy>;
    deployContract(
      name: "MockStkBnbStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockStkBnbStrategy>;
    deployContract(
      name: "SnBnbYieldConverterStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SnBnbYieldConverterStrategy>;
    deployContract(
      name: "StkBnbStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StkBnbStrategy>;
    deployContract(
      name: "Vat",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vat>;
    deployContract(
      name: "Vow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vow>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
