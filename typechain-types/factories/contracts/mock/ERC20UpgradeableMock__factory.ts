/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ERC20UpgradeableMock,
  ERC20UpgradeableMockInterface,
} from "../../../contracts/mock/ERC20UpgradeableMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d62806100206000396000f3fe608060405234801561001057600080fd5b50600436106100bf5760003560e01c806340c10f191161007c57806340c10f191461014c5780634cd88b761461016157806370a082311461017457806395d89b411461019d578063a457c2d7146101a5578063a9059cbb146101b8578063dd62ed3e146101cb57600080fd5b806306fdde03146100c4578063095ea7b3146100e257806318160ddd1461010557806323b872dd14610117578063313ce5671461012a5780633950935114610139575b600080fd5b6100cc6101de565b6040516100d99190610a04565b60405180910390f35b6100f56100f0366004610a70565b610270565b60405190151581526020016100d9565b6035545b6040519081526020016100d9565b6100f5610125366004610a9a565b610288565b604051601281526020016100d9565b6100f5610147366004610a70565b6102ac565b61015f61015a366004610a70565b6102ce565b005b61015f61016f366004610b79565b6102dc565b610109610182366004610bdd565b6001600160a01b031660009081526033602052604090205490565b6100cc610355565b6100f56101b3366004610a70565b610364565b6100f56101c6366004610a70565b6103e4565b6101096101d9366004610bff565b6103f2565b6060603680546101ed90610c32565b80601f016020809104026020016040519081016040528092919081815260200182805461021990610c32565b80156102665780601f1061023b57610100808354040283529160200191610266565b820191906000526020600020905b81548152906001019060200180831161024957829003601f168201915b5050505050905090565b60003361027e81858561041d565b5060019392505050565b600033610296858285610541565b6102a18585856105bb565b506001949350505050565b60003361027e8185856102bf83836103f2565b6102c99190610c6d565b61041d565b6102d88282610789565b5050565b60006102e86001610868565b90508015610300576000805461ff0019166101001790555b61030a83836108f5565b8015610350576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6060603780546101ed90610c32565b6000338161037282866103f2565b9050838110156103d75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102a1828686840361041d565b60003361027e8185856105bb565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b03831661047f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103ce565b6001600160a01b0382166104e05760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103ce565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061054d84846103f2565b905060001981146105b557818110156105a85760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103ce565b6105b5848484840361041d565b50505050565b6001600160a01b03831661061f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103ce565b6001600160a01b0382166106815760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103ce565b6001600160a01b038316600090815260336020526040902054818110156106f95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103ce565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290610730908490610c6d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161077c91815260200190565b60405180910390a36105b5565b6001600160a01b0382166107df5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103ce565b80603560008282546107f19190610c6d565b90915550506001600160a01b0382166000908152603360205260408120805483929061081e908490610c6d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60008054610100900460ff16156108af578160ff16600114801561088b5750303b155b6108a75760405162461bcd60e51b81526004016103ce90610c93565b506000919050565b60005460ff8084169116106108d65760405162461bcd60e51b81526004016103ce90610c93565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff1661091c5760405162461bcd60e51b81526004016103ce90610ce1565b6102d88282600054610100900460ff166109485760405162461bcd60e51b81526004016103ce90610ce1565b815161095b90603690602085019061096b565b5080516103509060379060208401905b82805461097790610c32565b90600052602060002090601f01602090048101928261099957600085556109df565b82601f106109b257805160ff19168380011785556109df565b828001600101855582156109df579182015b828111156109df5782518255916020019190600101906109c4565b506109eb9291506109ef565b5090565b5b808211156109eb57600081556001016109f0565b600060208083528351808285015260005b81811015610a3157858101830151858201604001528201610a15565b81811115610a43576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146108f057600080fd5b60008060408385031215610a8357600080fd5b610a8c83610a59565b946020939093013593505050565b600080600060608486031215610aaf57600080fd5b610ab884610a59565b9250610ac660208501610a59565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610afd57600080fd5b813567ffffffffffffffff80821115610b1857610b18610ad6565b604051601f8301601f19908116603f01168101908282118183101715610b4057610b40610ad6565b81604052838152866020858801011115610b5957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215610b8c57600080fd5b823567ffffffffffffffff80821115610ba457600080fd5b610bb086838701610aec565b93506020850135915080821115610bc657600080fd5b50610bd385828601610aec565b9150509250929050565b600060208284031215610bef57600080fd5b610bf882610a59565b9392505050565b60008060408385031215610c1257600080fd5b610c1b83610a59565b9150610c2960208401610a59565b90509250929050565b600181811c90821680610c4657607f821691505b60208210811415610c6757634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610c8e57634e487b7160e01b600052601160045260246000fd5b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220e4a400392c4cea59ce8a7845709d2488b45913b6c67645349aaf44a083c04b3664736f6c634300080a0033";

type ERC20UpgradeableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20UpgradeableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20UpgradeableMock__factory extends ContractFactory {
  constructor(...args: ERC20UpgradeableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC20UpgradeableMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ERC20UpgradeableMock__factory {
    return super.connect(runner) as ERC20UpgradeableMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20UpgradeableMockInterface {
    return new Interface(_abi) as ERC20UpgradeableMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC20UpgradeableMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ERC20UpgradeableMock;
  }
}
