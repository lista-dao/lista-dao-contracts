/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  PancakeERC20,
  PancakeERC20Interface,
} from "../../../../contracts/mock/dex/PancakeERC20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604080518082018252600b81526a50616e63616b65204c507360a81b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fe87cb5a4dc26cf9451529a20899fcee996799afd48d7c0db7c25e150b364661d818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012060035561090b806100f26000396000f3fe608060405234801561001057600080fd5b50600436106100bf5760003560e01c80633644e5151161007c5780633644e5151461019257806370a082311461019b5780637ecebe00146101bb57806395d89b41146101db578063a9059cbb14610201578063d505accf14610214578063dd62ed3e1461022957600080fd5b806306fdde03146100c4578063095ea7b31461010457806318160ddd1461012757806323b872dd1461013e57806330adf81f14610151578063313ce56714610178575b600080fd5b6100ee6040518060400160405280600b81526020016a50616e63616b65204c507360a81b81525081565b6040516100fb91906106d6565b60405180910390f35b610117610112366004610747565b610254565b60405190151581526020016100fb565b61013060005481565b6040519081526020016100fb565b61011761014c366004610771565b61026b565b6101307f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610180601281565b60405160ff90911681526020016100fb565b61013060035481565b6101306101a93660046107ad565b60016020526000908152604090205481565b6101306101c93660046107ad565b60046020526000908152604090205481565b6100ee60405180604001604052806007815260200166043616b652d4c560cc1b81525081565b61011761020f366004610747565b6102ff565b6102276102223660046107cf565b61030c565b005b610130610237366004610842565b600260209081526000928352604080842090915290825290205481565b6000610261338484610523565b5060015b92915050565b6001600160a01b0383166000908152600260209081526040808320338452909152812054600019146102ea576001600160a01b03841660009081526002602090815260408083203384529091529020546102c59083610585565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6102f58484846105db565b5060019392505050565b60006102613384846105db565b428410156103545760405162461bcd60e51b815260206004820152601060248201526f14185b98d85ad94e881156141254915160821b60448201526064015b60405180910390fd5b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876103a78361088b565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161042092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561048b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906104c15750886001600160a01b0316816001600160a01b0316145b61050d5760405162461bcd60e51b815260206004820152601a60248201527f50616e63616b653a20494e56414c49445f5349474e4154555245000000000000604482015260640161034b565b610518898989610523565b505050505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60008261059283826108a6565b91508111156102655760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015260640161034b565b6001600160a01b0383166000908152600160205260409020546105fe9082610585565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461062d9082610681565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105789085815260200190565b60008261068e83826108bd565b91508110156102655760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640161034b565b600060208083528351808285015260005b81811015610703578581018301518582016040015282016106e7565b81811115610715576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461074257600080fd5b919050565b6000806040838503121561075a57600080fd5b6107638361072b565b946020939093013593505050565b60008060006060848603121561078657600080fd5b61078f8461072b565b925061079d6020850161072b565b9150604084013590509250925092565b6000602082840312156107bf57600080fd5b6107c88261072b565b9392505050565b600080600080600080600060e0888a0312156107ea57600080fd5b6107f38861072b565b96506108016020890161072b565b95506040880135945060608801359350608088013560ff8116811461082557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561085557600080fd5b61085e8361072b565b915061086c6020840161072b565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561089f5761089f610875565b5060010190565b6000828210156108b8576108b8610875565b500390565b600082198211156108d0576108d0610875565b50019056fea26469706673582212202cb8fc8c23c3f16cf46c7da26d82d9b2f9420a8da5aeedc96466034a4d68515764736f6c634300080a0033";

type PancakeERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PancakeERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PancakeERC20__factory extends ContractFactory {
  constructor(...args: PancakeERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PancakeERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PancakeERC20__factory {
    return super.connect(runner) as PancakeERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PancakeERC20Interface {
    return new Interface(_abi) as PancakeERC20Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PancakeERC20 {
    return new Contract(address, _abi, runner) as unknown as PancakeERC20;
  }
}
