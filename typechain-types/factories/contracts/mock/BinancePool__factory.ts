/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BinancePool,
  BinancePoolInterface,
} from "../../../contracts/mock/BinancePool";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bondContract",
        type: "address",
      },
    ],
    name: "changeBondContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "certToken",
        type: "address",
      },
    ],
    name: "changeCertContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "relayerFee",
        type: "uint256",
      },
    ],
    name: "changeRelayerFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMinimumStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRelayerFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "bcOperator",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "expireTime",
        type: "uint64",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "markedForManualDistribute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pendingClaimerUnstakes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "pendingUnstakesOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakeAndClaimCerts",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "stashedForManualDistributes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
    ],
    name: "unstakeCerts",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ecc806100206000396000f3fe6080604052600436106100de5760003560e01c80638da5cb5b116100855780638da5cb5b146101fc578063adced4aa14610229578063c2117d821461023f578063cdbfe75814610254578063d9bbd27814610274578063efc8935614610289578063f2fde38b146102a9578063fd78b77a146102c9578063ff0a42de146102f957600080fd5b806317d026e6146100e35780633a4b66f1146101055780633f9dac521461010d578063409cb613146101565780635c975abb14610176578063715018a61461019a5780637879ec31146101af5780637b1544bc146101cf575b600080fd5b3480156100ef57600080fd5b506101036100fe366004610c69565b60cc55565b005b610103610301565b34801561011957600080fd5b50610143610128366004610c99565b6001600160a01b0316600090815260d1602052604090205490565b6040519081526020015b60405180910390f35b34801561016257600080fd5b50610103610171366004610cbb565b610342565b34801561018257600080fd5b5060335460ff165b604051901515815260200161014d565b3480156101a657600080fd5b506101036106f9565b3480156101bb57600080fd5b506101036101ca366004610ce5565b610734565b3480156101db57600080fd5b506101436101ea366004610c99565b60d16020526000908152604090205481565b34801561020857600080fd5b5061021161080d565b6040516001600160a01b03909116815260200161014d565b34801561023557600080fd5b5061014360d25481565b34801561024b57600080fd5b5060cc54610143565b34801561026057600080fd5b5061010361026f366004610c99565b61081c565b34801561028057600080fd5b5060c954610143565b34801561029557600080fd5b506101036102a4366004610c99565b61086d565b3480156102b557600080fd5b506101036102c4366004610c99565b6108be565b3480156102d557600080fd5b5061018a6102e4366004610c69565b60d36020526000908152604090205460ff1681565b61010361095e565b6002606554141561032d5760405162461bcd60e51b815260040161032490610d39565b60405180910390fd5b600260655561033a6109fd565b506001606555565b33600090815260d5602052604090205460ff16156103bc5760405162461bcd60e51b815260206004820152603160248201527f7468652061646472657373206861732061207265717565737420666f72206d61604482015270373ab0b6103234b9ba3934b13aba34b7b760791b6064820152608401610324565b600260655414156103df5760405162461bcd60e51b815260040161032490610d39565b600260655560cf54604051636c58d43d60e01b8152600481018390526000916001600160a01b031690636c58d43d90602401602060405180830381865afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104529190610d70565b905060c9548110156104bc5760405162461bcd60e51b815260206004820152602d60248201527f76616c7565206d7573742062652067726561746572207468616e206d696e207560448201526c1b9cdd185ad948185b5bdd5b9d609a1b6064820152608401610324565b60d454604051635d0a81c160e01b815233600482015282916001600160a01b031690635d0a81c1906024016020604051808303816000875af1158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190610d70565b10156105895760405162461bcd60e51b815260206004820152602860248201527f63616e6e6f7420756e7374616b65206d6f7265207468616e2068617665206f6e604482015267206164647265737360c01b6064820152608401610324565b6001600160a01b038316600090815260d160205260409020546105f25760d080546001810182556000919091527fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180546001600160a01b0319166001600160a01b0385161790555b6001600160a01b038316600090815260d160205260408120805483929061061a908490610d89565b909155505060cf5460405163be1746f560e01b81526001600160a01b039091169063be1746f5906106519033908690600401610daf565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b505060cf54604051633c1a15b960e11b81523360048201526001600160a01b0387811660248301526044820186905290911692506378342b729150606401600060405180830381600087803b1580156106d757600080fd5b505af11580156106eb573d6000803e3d6000fd5b505060016065555050505050565b3361070261080d565b6001600160a01b0316146107285760405162461bcd60e51b815260040161032490610dc8565b6107326000610a6c565b565b60006107406001610abe565b90508015610758576000805461ff0019166101001790555b610760610b4b565b610768610b7a565b610770610ba9565b60cd80546001600160a01b038087166001600160a01b03199283161790925560ce80549286169290911691909117905567ffffffffffffffff821660ca556305f5e10060c955662386f26fc1000060cc558015610807576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6097546001600160a01b031690565b3361082561080d565b6001600160a01b03161461084b5760405162461bcd60e51b815260040161032490610dc8565b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b3361087661080d565b6001600160a01b03161461089c5760405162461bcd60e51b815260040161032490610dc8565b60d480546001600160a01b0319166001600160a01b0392909216919091179055565b336108c761080d565b6001600160a01b0316146108ed5760405162461bcd60e51b815260040161032490610dc8565b6001600160a01b0381166109525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610324565b61095b81610a6c565b50565b600260655414156109815760405162461bcd60e51b815260040161032490610d39565b600260655560006109906109fd565b60cf54604051631a1ac52760e21b81529192506001600160a01b03169063686b149c906109c39033908590600401610daf565b600060405180830381600087803b1580156109dd57600080fd5b505af11580156109f1573d6000803e3d6000fd5b50506001606555505050565b60cf5460405163a85374e160e01b815260009134916001600160a01b039091169063a85374e190610a349033908590600401610daf565b600060405180830381600087803b158015610a4e57600080fd5b505af1158015610a62573d6000803e3d6000fd5b5092949350505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615610b05578160ff166001148015610ae15750303b155b610afd5760405162461bcd60e51b815260040161032490610dfd565b506000919050565b60005460ff808416911610610b2c5760405162461bcd60e51b815260040161032490610dfd565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610b725760405162461bcd60e51b815260040161032490610e4b565b610732610bd8565b600054610100900460ff16610ba15760405162461bcd60e51b815260040161032490610e4b565b610732610c0b565b600054610100900460ff16610bd05760405162461bcd60e51b815260040161032490610e4b565b610732610c39565b600054610100900460ff16610bff5760405162461bcd60e51b815260040161032490610e4b565b6033805460ff19169055565b600054610100900460ff16610c325760405162461bcd60e51b815260040161032490610e4b565b6001606555565b600054610100900460ff16610c605760405162461bcd60e51b815260040161032490610e4b565b61073233610a6c565b600060208284031215610c7b57600080fd5b5035919050565b80356001600160a01b0381168114610b4657600080fd5b600060208284031215610cab57600080fd5b610cb482610c82565b9392505050565b60008060408385031215610cce57600080fd5b610cd783610c82565b946020939093013593505050565b600080600060608486031215610cfa57600080fd5b610d0384610c82565b9250610d1160208501610c82565b9150604084013567ffffffffffffffff81168114610d2e57600080fd5b809150509250925092565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215610d8257600080fd5b5051919050565b60008219821115610daa57634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220a5792508b5716f2d4fe52355eaca1fdfe33f540fb2d9996ccdfeebff2211bdd464736f6c634300080a0033";

type BinancePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BinancePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BinancePool__factory extends ContractFactory {
  constructor(...args: BinancePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BinancePool & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BinancePool__factory {
    return super.connect(runner) as BinancePool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BinancePoolInterface {
    return new Interface(_abi) as BinancePoolInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BinancePool {
    return new Contract(address, _abi, runner) as unknown as BinancePool;
  }
}
