/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ReceiverMock,
  ReceiverMockInterface,
} from "../../../../contracts/mock/bnbx/ReceiverMock";

const _abi = [
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060db8061001f6000396000f3fe60806040523660785760005b60648111607557606481111560665760405162461bcd60e51b815260206004820152601c60248201527f69203e203130302c20736f6d652072616e646f6d207265717569726500000000604482015260640160405180910390fd5b80606e81607d565b915050600b565b50005b600080fd5b6000600019821415609e57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d35f4e7dc4842ceb7792d2e1a6fe8214dcd4088cc37f093677dba3a1dadac45364736f6c634300080a0033";

type ReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReceiverMock__factory extends ContractFactory {
  constructor(...args: ReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ReceiverMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ReceiverMock__factory {
    return super.connect(runner) as ReceiverMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReceiverMockInterface {
    return new Interface(_abi) as ReceiverMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ReceiverMock {
    return new Contract(address, _abi, runner) as unknown as ReceiverMock;
  }
}
