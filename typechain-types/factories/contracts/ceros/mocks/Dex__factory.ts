/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { Dex, DexInterface } from "../../../../contracts/ceros/mocks/Dex";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wNative",
        type: "address",
      },
      {
        internalType: "address",
        name: "_otherToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "otherTokenAmt",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256",
      },
    ],
    name: "getAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nativeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "otherToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "otherTokenAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256",
      },
    ],
    name: "quote",
    outputs: [
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
    ],
    name: "setRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactETHForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForETH",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wNative",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610dd1380380610dd183398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610d13806100be6000396000f3fe6080604052600436106100e95760003560e01c80637ff36ab5116100855780637ff36ab51461024057806385f8c259146100ee5780638803dbee146101e65780638d0e9a8414610253578063a69ef82614610269578063ad5c46481461027f578063ad615dec146100ee578063c45a01551461027f578063d06ca61f1461029357600080fd5b8063054d50d4146100ee57806318cbafe5146101255780631f00ca74146101525780632c4e722e146101765780632d68efc91461018c57806334fcf437146101c457806338ed1739146101e6578063433b3c051461020d57806351c6590a1461022d575b600080fd5b3480156100fa57600080fd5b5061011261010936600461095d565b60009392505050565b6040519081526020015b60405180910390f35b34801561013157600080fd5b506101456101403660046109f1565b6102b3565b60405161011c9190610a61565b34801561015e57600080fd5b5061014561016d366004610aa5565b60609392505050565b34801561018257600080fd5b5061011260045481565b34801561019857600080fd5b506000546101ac906001600160a01b031681565b6040516001600160a01b03909116815260200161011c565b3480156101d057600080fd5b506101e46101df366004610af1565b600455565b005b3480156101f257600080fd5b506101456102013660046109f1565b60609695505050505050565b34801561021957600080fd5b506001546101ac906001600160a01b031681565b6101e461023b366004610af1565b6103e0565b61014561024e366004610b0a565b61048f565b34801561025f57600080fd5b5061011260035481565b34801561027557600080fd5b5061011260025481565b34801561028b57600080fd5b5060006101ac565b34801561029f57600080fd5b506101456102ae366004610aa5565b610635565b6060428210156102de5760405162461bcd60e51b81526004016102d590610b70565b60405180910390fd5b6000546001600160a01b0316858560018181106102fd576102fd610b99565b90506020020160208101906103129190610baf565b6001600160a01b0316146103385760405162461bcd60e51b81526004016102d590610bca565b610343878686610635565b90508060018151811061035857610358610b99565b602002602001015186111561037f5760405162461bcd60e51b81526004016102d590610bf4565b8060008151811061039257610392610b99565b6020026020010151600360008282546103ab9190610c38565b925050819055506103d683826001815181106103c9576103c9610b99565b602002602001015161074d565b9695505050505050565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045b9190610c50565b50346002600082825461046e9190610c38565b9250508190555080600360008282546104879190610c38565b909155505050565b6060428210156104b15760405162461bcd60e51b81526004016102d590610b70565b600080546001600160a01b03169086908690816104d0576104d0610b99565b90506020020160208101906104e59190610baf565b6001600160a01b03161461050b5760405162461bcd60e51b81526004016102d590610bca565b34610517818787610635565b91508160018151811061052c5761052c610b99565b60200260200101518711156105535760405162461bcd60e51b81526004016102d590610bf4565b8160008151811061056657610566610b99565b60200260200101516002600082825461057f9190610c38565b90915550506001805483516001600160a01b039091169163a9059cbb918791869181106105ae576105ae610b99565b60200260200101516040518363ffffffff1660e01b81526004016105e79291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190610c50565b505095945050505050565b6040805160028082526060808301845292602083019080368337019050509050838160008151811061066957610669610b99565b60200260200101818152505061067f838361080f565b600080546001600160a01b031690849084908161069e5761069e610b99565b90506020020160208101906106b39190610baf565b6001600160a01b0316141561070757670de0b6b3a7640000600454856106d99190610c72565b6106e39190610c91565b816001815181106106f6576106f6610b99565b602002602001018181525050610746565b60045461071c85670de0b6b3a7640000610c72565b6107269190610c91565b8160018151811061073957610739610b99565b6020026020010181815250505b9392505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461079a576040519150601f19603f3d011682016040523d82523d6000602084013e61079f565b606091505b505090508061080a5760405162461bcd60e51b815260206004820152603160248201527f756e61626c6520746f2073656e642076616c75652c20726563697069656e74206044820152701b585e481a185d99481c995d995c9d1959607a1b60648201526084016102d5565b505050565b6002811461082f5760405162461bcd60e51b81526004016102d590610cb3565b600080546001600160a01b031690839083908161084e5761084e610b99565b90506020020160208101906108639190610baf565b6001600160a01b03161480156108b55750600180546001600160a01b0316908390839081811061089557610895610b99565b90506020020160208101906108aa9190610baf565b6001600160a01b0316145b8061093d57506000546001600160a01b0316828260018181106108da576108da610b99565b90506020020160208101906108ef9190610baf565b6001600160a01b031614801561093d57506001546001600160a01b0316828260008161091d5761091d610b99565b90506020020160208101906109329190610baf565b6001600160a01b0316145b6109595760405162461bcd60e51b81526004016102d590610cb3565b5050565b60008060006060848603121561097257600080fd5b505081359360208301359350604090920135919050565b60008083601f84011261099b57600080fd5b50813567ffffffffffffffff8111156109b357600080fd5b6020830191508360208260051b85010111156109ce57600080fd5b9250929050565b80356001600160a01b03811681146109ec57600080fd5b919050565b60008060008060008060a08789031215610a0a57600080fd5b8635955060208701359450604087013567ffffffffffffffff811115610a2f57600080fd5b610a3b89828a01610989565b9095509350610a4e9050606088016109d5565b9150608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015610a9957835183529284019291840191600101610a7d565b50909695505050505050565b600080600060408486031215610aba57600080fd5b83359250602084013567ffffffffffffffff811115610ad857600080fd5b610ae486828701610989565b9497909650939450505050565b600060208284031215610b0357600080fd5b5035919050565b600080600080600060808688031215610b2257600080fd5b85359450602086013567ffffffffffffffff811115610b4057600080fd5b610b4c88828901610989565b9095509350610b5f9050604087016109d5565b949793965091946060013592915050565b6020808252600f908201526e191958591b1a5b99481c995d995c9d608a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610bc157600080fd5b610746826109d5565b60208082526010908201526f0aadce6eae0e0dee4e8cac840e0c2e8d60831b604082015260600190565b60208082526014908201527336b4b71030b6b7bab73a1037baba1032b93937b960611b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610c4b57610c4b610c22565b500190565b600060208284031215610c6257600080fd5b8151801515811461074657600080fd5b6000816000190483118215151615610c8c57610c8c610c22565b500290565b600082610cae57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526010908201526f0eadce6eae0e0dee4e8cac840e0c2e8d60831b60408201526060019056fea26469706673582212206217694fdea4acd14987063102cc8e86f3bf8e9e229c5a316be379e78d54f65c64736f6c634300080a0033";

type DexConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Dex__factory extends ContractFactory {
  constructor(...args: DexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _wNative: AddressLike,
    _otherToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_wNative, _otherToken, overrides || {});
  }
  override deploy(
    _wNative: AddressLike,
    _otherToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_wNative, _otherToken, overrides || {}) as Promise<
      Dex & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Dex__factory {
    return super.connect(runner) as Dex__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexInterface {
    return new Interface(_abi) as DexInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Dex {
    return new Contract(address, _abi, runner) as unknown as Dex;
  }
}
