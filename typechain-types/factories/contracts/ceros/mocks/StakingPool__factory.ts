/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  StakingPool,
  StakingPoolInterface,
} from "../../../../contracts/ceros/mocks/StakingPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_certToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "certToken",
    outputs: [
      {
        internalType: "contract ICertToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMinStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMinUnstake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "getPendingUnstakesOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRelayerFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minimumStake",
        type: "uint256",
      },
    ],
    name: "setMinimumStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_relayerFee",
        type: "uint256",
      },
    ],
    name: "setRelayerFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakeCerts",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
    ],
    name: "unstakeCertsFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161068338038061068383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6105f0806100936000396000f3fe60806040526004361061007a5760003560e01c8063034c4454146100865780630872e9ff146100aa578063233e9903146100e257806346faa33c1461010457806356a3b5fa1461008657806381782dff1461012557806383302a6f14610145578063ac76d45014610165578063c2117d821461016d57600080fd5b3661008157005b600080fd5b34801561009257600080fd5b506001545b6040519081526020015b60405180910390f35b3480156100b657600080fd5b506000546100ca906001600160a01b031681565b6040516001600160a01b0390911681526020016100a1565b3480156100ee57600080fd5b506101026100fd3660046104b2565b600155565b005b34801561011057600080fd5b5061009761011f3660046104e7565b50600090565b34801561013157600080fd5b50610102610140366004610509565b610182565b34801561015157600080fd5b506101026101603660046104b2565b600255565b610102610284565b34801561017957600080fd5b50600254610097565b600054604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156101ce57600080fd5b505af11580156101e2573d6000803e3d6000fd5b505050506102808260008054906101000a90046001600160a01b03166001600160a01b03166371ca337d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561023b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025f9190610533565b61027184670de0b6b3a7640000610562565b61027b9190610581565b6103f0565b5050565b6001543410158015610297575060025434115b6102e15760405162461bcd60e51b81526020600482015260166024820152753ab73837b9b9b4b13632903a3930b739b0b1ba34b7b760511b60448201526064015b60405180910390fd5b6000600254346102f191906105a3565b90506000670de0b6b3a764000060008054906101000a90046001600160a01b03166001600160a01b03166371ca337d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103739190610533565b61037d9084610562565b6103879190610581565b6000546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b505050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461043d576040519150601f19603f3d011682016040523d82523d6000602084013e610442565b606091505b50509050806104ad5760405162461bcd60e51b815260206004820152603160248201527f756e61626c6520746f2073656e642076616c75652c20726563697069656e74206044820152701b585e481a185d99481c995d995c9d1959607a1b60648201526084016102d8565b505050565b6000602082840312156104c457600080fd5b5035919050565b80356001600160a01b03811681146104e257600080fd5b919050565b6000602082840312156104f957600080fd5b610502826104cb565b9392505050565b6000806040838503121561051c57600080fd5b610525836104cb565b946020939093013593505050565b60006020828403121561054557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561057c5761057c61054c565b500290565b60008261059e57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156105b5576105b561054c565b50039056fea2646970667358221220a563ec7390ea1f77813fbafdb6386e2e5acb51cc889527d834885d30f3079da664736f6c634300080a0033";

type StakingPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingPool__factory extends ContractFactory {
  constructor(...args: StakingPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _certToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_certToken, overrides || {});
  }
  override deploy(
    _certToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_certToken, overrides || {}) as Promise<
      StakingPool & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StakingPool__factory {
    return super.connect(runner) as StakingPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingPoolInterface {
    return new Interface(_abi) as StakingPoolInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): StakingPool {
    return new Contract(address, _abi, runner) as unknown as StakingPool;
  }
}
